{"./":{"url":"./","title":"简介","keywords":"","body":" 技术交流 QQ群：777164022 EasyClick单机版 解放双手，可编程式、智能化自动点击App；只要会敲键盘就能进行编程！ 简单易编程 丰富的API，图像识别 可脱机运行，可单独发布 支持无障碍/免ROOT运行 智能IDE编程支持 ... EasyClick企业版 云控平台，数千台手机同步运行，节省企业测试成本 不局限地域，任意地方部署设备 云端画面实时同步 定时/非定时执行任务 人机控制同步，人工可介入控制替代自动操作 自带数据分析功能，实时数据报表 ... EasyClick能做什么 App爬虫等 残障人士的辅助，例如语音读书等 自动化测试App ... 适合人群 有意学习自动化测试脚本的人员 希望用自动操作代替手动的人员 企业App测试团队及测试人员 技术交流 QQ群：777164022 在开始之前请阅读用户协议和免责声明，当你开始使用本产品，默认已经接受用户协议和免责声明。 用户协议 免责声明 "},"zh-cn/features.html":{"url":"zh-cn/features.html","title":"特性","keywords":"","body":"功能特性 支持 Android 5.0 ~ 10.0 支持 Root/免Root，无障碍运行 支持所有点击动作在坐标区域内随机 支持色块、颜色查找 支持控件查找，非找坐标模式，更加智能 支持OpenCV图像匹配识别技术，图像识别率95%以上 语言工具特性 使用JavaScript语言开发，更容易上手 所有Java的类库都适用，无需重复编写代码 智能IDE支持，屏幕实时同步 自带日志查看功能，实时查看运行结果 ...... 下一章: 2分钟完成一个自动化点击App，点击迅速入门 "},"zh-cn/changelog.html":{"url":"zh-cn/changelog.html","title":"更改记录","keywords":"","body":"当前最新版本: 3.6.0 3.6.0 : 1、新增定时任务函数 2、新增打开App即运行脚本开关功能 3、节点新增bounds范围查找 4、新增脚本热更新 5、新增点击节点中心点的函数 6、新增企业版本开放式节点接口 7、新增点击节点中心点的函数 8、新增webview错误输出到控制台 9、IDEA新增打开adb命令控制台 10、新增Sqlite3操作模块 11、修复图色模块toBase64方法 3.5.3 : 1、新增MetreUI模板 2、新增节点、activity等待和超时函数 3、新增悬浮窗权限检测和悬浮窗自定义视图 4、优化正则匹配，优化节点查找 5、优化activity-class 获取 3.5.0: 1、新增IDE插件的编写 2、新增HTML模板支持和js控制窗口方法 3、新增WebView控件支持 4、新增粘贴到输入框的方法 5、增加无障碍下的多点触摸 6、新增图色模块中将图片转成base64和区域剪切方法 7、新增部分选择节点的属性 8、http请求异常提示反馈到IDEA ,默认忽略请求错误问题 9、删除部分不用的方法，新增部分节点快捷选择方法 10、优化Toast展示 11、优化图色截图速度30ms以下，区域找色找图100ms以下 3.4.5: 1、新增读取IEC文件包的资源方法 2、新增Http请求的万能方法 3、新增多点触摸函数 4、新增剪贴板读取和设置功能 5、新增IDEA工具暂停脚本功能 6、新增IDEA取图功能，优化图色查找 7、优化打包和签名 8、优化获取节点数据时候强制刷新，保证是最新数据 9、修复获取UI参数的缓存问题 3.4.2: 1、优化新增悬浮窗字体设置 2、修复部分APP无法读取到界面元素例如抖音等 3、增加抓取节点模式setFetchNodeMode 4、优化IDE获取界面元素的逻辑 5、新增IDE 预览 运行 打包快捷键 3.4.0: 1、新增NodeInfo节点直接操作的方法,例如parent、click等方法 2、新增JavaScript根据获取所有节点的属性方法 3、新增新增保存日志到文件中 4、新增打包是否显示设置 5、修复模拟器下UI的错误 3.3.0: 1、新增JavaScript loaddex载入dex/apk方法 2、新增JavaScript loadjar载入jar包的方法 3、新增JavaScript exit退出脚本方法 4、新增JavaScript更改UI参数的方法 5、新增JavaScript设置悬浮窗大小方法,优化展示 6、优化UI界面，新增多TAB支持 7、新增IDE调试环境参数同步到手机 8、修改屏幕映射菜单按钮为任务按钮 9、优化设备激活检测 3.2.0: 1、新增depth选择器 2、新增drawingOrder选择器 3、修复日志浮窗问题 4、优化代理模式选择器效率 3.0.1: 1、修复脚本暂停问题 3.0.0: 1、新增设备连接 2、新增预览、运行、打包工程 3、新增节点查看 4、新增同屏映射 "},"zh-cn/getting-start.html":{"url":"zh-cn/getting-start.html","title":"开始","keywords":"","body":"下载开发工具 百度网盘下载 提取码：7bhy 天翼云下载 密码：nup3 QQ群下载：777164022 下载idea开发工具，文件以idea-xxx开头的，也可以自行到idea官网下载 IDEA官网下载地址 网页地址：https://www.jetbrains.com/idea/download/other.html 商业版本JS智能提示：2019.3.4 for Windows (exe) https://download.jetbrains.com/idea/ideaIU-2019.3.4.exe 社区版本(免费)：2019.3.4 for Windows (exe) https://download.jetbrains.com/idea/ideaIC-2019.3.4.exe 安装后，打开bin/idea64.exe文件开始运行 下载EasyClick最新版本的IDEA插件，并按照到IDEA中，安装教程：https://blog.csdn.net/qq_35246620/article/details/78289074 创建工程 创建成功 连接设备 点击菜单 'EasyClick开发工具' - '设备连接' 选择任意一个连接方式 运行程序 预览UI 运行工程，如果运行失败提示无权限，可以点击菜单 'EasyClick开发工具' - '激活设备' "},"zh-cn/funcs/devtools/dev-tools.html":{"url":"zh-cn/funcs/devtools/dev-tools.html","title":"开发工具介绍","keywords":"","body":" 安装 工程相关 设备相关 屏幕相关 设置相关 "},"zh-cn/funcs/devtools/dev-tools-install.html":{"url":"zh-cn/funcs/devtools/dev-tools-install.html","title":"安装","keywords":"","body":"开发环境安装 百度网盘下载 提取码：7bhy 天翼云下载 密码：nup3 QQ群下载：777164022 下载idea开发工具，文件以idea-xxx开头的，也可以自行到idea官网下载 IDEA官网下载地址 网页地址：https://www.jetbrains.com/idea/download/other.html 商业版本JS智能提示：2019.3.4 for Windows (exe) https://download.jetbrains.com/idea/ideaIU-2019.3.4.exe 社区版本(免费)：2019.3.4 for Windows (exe) https://download.jetbrains.com/idea/ideaIC-2019.3.4.exe 安装后，打开bin/idea64.exe文件开始运行 下载EasyClick最新版本的IDEA插件，并按照到IDEA中，安装教程：https://blog.csdn.net/qq_35246620/article/details/78289074 主界面预览 "},"zh-cn/funcs/devtools/dev-tools-project.html":{"url":"zh-cn/funcs/devtools/dev-tools-project.html","title":"工程相关","keywords":"","body":"工程相关 创建工程 创建成功 预览工程 菜单 'EasyClick开发工具' - '预览工程' 在工程或者源码文件上点击右键选择 '预览工程' 预览工程会将UI视图直接在手机预览 运行工程 菜单 'EasyClick开发工具' - '运行工程' 在工程或者源码文件上点击右键选择 '运行工程' 运行工程会直接在手机上运行脚本，所有的日志在'EasyClick运行日志'可看到 打包 菜单 'EasyClick开发工具' - '打包工程' 在工程或者源码文件上点击右键选择 '打包工程' 打包工程会编译源码并输入apk文件，所有的日志在'EasyClick运行日志'可看到 "},"zh-cn/funcs/devtools/dev-tools-device.html":{"url":"zh-cn/funcs/devtools/dev-tools-device.html","title":"设备相关","keywords":"","body":"设备相关 菜单栏-EasyClick开发工具-设备连接 设备连接 USB连接 WIFI连接 WIFI连接是指需要再手机上开启无线调试模式， 点击wifi连接，然后输入手机ip地址即可 教程: https://www.jianshu.com/p/a9543f2e89de 二维码安装 如果部分手机无法安装上EC调试版程序，可以使用扫码方式安装 设备激活 菜单栏-EasyClick开发工具-激活设备 激活设备实现免root运行脚本 激活设备可以实现自动开启无障碍，无需手动开启 "},"zh-cn/funcs/devtools/dev-tools-screen.html":{"url":"zh-cn/funcs/devtools/dev-tools-screen.html","title":"屏幕相关","keywords":"","body":"屏幕相关 菜单栏-EasyClick开发工具-节点抓取节点抓取 点击节点抓取按钮，可以获取当前的屏幕元素 可以在抓取的屏幕上进行点击，选择元素 可以在节点属性窗口，复制节点的值 同屏映射 点击屏幕映射按钮，可以连接到当前的设备屏幕，实时预览和操作 如果窗口太小，可以点击右上方的三点按钮，使得窗口进行浮动起来 找色找图操作 点击节点抓取按钮，可以获取当前的屏幕元素 在图片上点击右键，选择图色模式 在图片上想要的区域，拖动出一个矩形框 点击右键选择 取色，然后设置想要取得色块的矩阵大小，点击确定 生成颜色值后，进行复制到代码中使用 找图：直接选择找图菜单，将图片保存到工程目录下的res文件夹中 "},"zh-cn/funcs/devtools/dev-tools-settings.html":{"url":"zh-cn/funcs/devtools/dev-tools-settings.html","title":"设置","keywords":"","body":"设置相关 设置 菜单栏-EasyClick开发工具-EasyClick设置 设置包括了和屏幕映射相关的属性 "},"zh-cn/funcs.html":{"url":"zh-cn/funcs.html","title":"功能函数","keywords":"","body":" 全局模块 全局快捷事件 选择器&节点 无障碍事件 代理事件 图色函数 设备函数 文件函数 网络函数 线程函数 常用工具函数 Shell命令函数 Sqlite命令函数 "},"zh-cn/funcs/global/global.html":{"url":"zh-cn/funcs/global/global.html","title":"全局模块","keywords":"","body":"说明 全局模块是指直接调用方法就可以使用的模块，无需使用前缀对象名称 模块加载 loadDex 载入dex或者apk 载入dex文件 @param path 路径，加载顺序分别是插件目录(例如 ab.apk)或者是文件路径(例如 /sdcard/ab.apk)加载 @return true 载入成功， false载入失败 function main(){ //类似这样会先从IEC文件的插件目录查找 //loadDex(\"ocr.apk\"); //下面这个是从sdcard查找 loadDex(\"/sdcard/a.apk\"); // a.apk中存在com.A这个这个类，可以直接使用 var obj = new com.A(); } main(); loadJar 载入jar 载入jar文件 @param path 路径，加载顺序分别是插件目录(例如 ab.jar)或者是文件路径(例如 /sdcard/ab.jar)加载 @return true 载入成功， false载入失败 function main(){ loadJar(\"/sdcard/a.jar\"); // a.jar中存在com.A这个这个类，可以直接使用 var obj = new com.A(); } main(); importClass 导入JAVA类 导入java的class给js用 @param clz class的名称例如: com.A function main(){ importClass(com.A); var obj = new com.A(); } main(); importPackage 导入JAVA包 导入java包下面所有类给js用 @param clz class的名称例如: com.b function main(){ importPackage(com.b); var obj = new com.b.A(); } main(); JSON.stringify 格式化为JSON字符串 格式化对象为JSON字符串 @param 对象 function main(){ var m ={\"sss\":\"a\"}; var d =JSON.stringify(m); toast(d); } main(); JSON.parse 转换为JSON对象 格式化JSON字符串为对象 @param 字符串 function main(){ var m ={\"sss\":\"a\"}; var d =JSON.stringify(m); d =JSON.parse(d); toast(d); } main(); 退出脚本 exit exit(); 暂停执行 sleep 休眠 @param miSecond 毫秒 function main(){ var result = sleep(1000); if (result){ toast(\"成功\"); } else { toast(\"失败\"); } } main(); 日志消息方法 setSaveLog 设置保存日志信息到文件中 @param save 是否保存 @return 保存日志文件的目录 function main(){ var s = setSaveLog(true); logd(\"save dir is:\"+s); } main(); toast 显示Toast消息 @param msg 消息字符串 function main(){ toast(\"msg\"); } main(); logd 调试日志 @param msg 消息字符串 function main(){ logd(\"msg\"); } main(); loge 错误日志 @param msg 消息字符串 function main(){ loge(\"msg\"); } main(); logw 警告日志 @param msg 消息字符串 function main(){ logw(\"msg\"); } main(); logi 信息日志 @param msg 消息字符串 function main(){ logi(\"msg\"); } main(); 读取IEC包资源 readResString 读取res文件夹中的资源文件,并返回字符串 @param fileName 文件名称，不要加res前缀 @return string 如果是null代表没内容 function main(){ var testData = readResString(\"a.txt\"); } main(); readResBitmap 读取res文件夹中的资源文件，并返Bitmap图片对象 @param fileName 文件名称，不要加res前缀 @return string 如果是null代表没内容 function main(){ var b = readResBitmap(\"a.txt\"); } main(); readResAutoImage 读取res文件夹中的资源文件，并返 AutoImage 图片对象 @param fileName 文件名称，不要加res前缀 @return string 如果是null代表没内容 function main(){ var b = readResAutoImage(\"img/a.png\"); } main(); saveResToFile 保存res文件夹中的资源文件到指定的路径 @param fileName 文件名称，不要加res前缀 @param path 要保存到的路径地址，例如/sdcard/aa.txt @return boolean|布尔型 true代表保存成功 function main(){ var b = saveResToFile(\"img/a.png\",\"/sdcard/a.png\"); } main(); UI参数读取 readConfigInt @description 读取UI界面中的参数,返回是整型 @param key 在UI界面中配置的key @return 整型，找不到就返回0 function main(){ var testData = readConfigInt(\"test_key\"); } main(); readConfigString 读取UI界面中的参数,返回是字符串 @param key 在UI界面中配置的key @return 字符串 找不到就返回空字符串 function main(){ var testData = readConfigString(\"test_key\"); } main(); readConfigDouble 读取UI界面中的参数,返回是Double型 @param key 在UI界面中配置的key @return double function main(){ var testData = readConfigDouble(\"test_key\"); } main(); readConfigBoolean 读取UI界面中的参数,返回是布尔型 @param key 在UI界面中配置的key @return true 或者 false function main(){ var testData = readConfigDouble(\"test_key\"); } main(); getConfigJSON 取得配置的JSON @return JSON数据 function main(){ var testData = getConfigJSON(); } main(); updateConfig 更新配置 @param key 键 @param value 值 @return {boolean} true 成功，false失败 function main(){ updateConfig(\"a\",\"sss\"); } main(); 系统设置界面 openECSystemSetting 打开EC系统设置页面 @return true 成功 false 失败 function main(){ var result = openECSystemSetting(); } main(); 运行模式 isAccMode 是否是无障碍模式 @return true或者false function main(){ var result = isAccMode(); } main(); isAgentMode 是否是代理模式 @return true或者false function main(){ var result = isAgentMode(); } main(); "},"zh-cn/funcs/global/global-shortcut.html":{"url":"zh-cn/funcs/global/global-shortcut.html","title":"全局快捷事件","keywords":"","body":"说明 全局模块中封装的快捷事件，不用区分是无障碍模式还是代理模式 点击函数 clickPoint 点击坐标 @param x x坐标 @param y y坐标 @return {boolean|布尔型} function main(){ var result = clickPoint(100,100); if (result){ toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); click 点击选择器 @param selectors 选择器对象 @return {boolean|布尔型} function main(){ var selector = text(\"我是文本\"); var result = click(selector); if (result){ toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); clickRandom 随机点击选择器的任意元素 @param selectors 选择器对象 @return {boolean|布尔型} function main(){ var selector = text(\"我是文本\"); var result = clickRandom(selector); if (result){ toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); clickRandomRect 随机点击区域中的坐标 @param rect 区域对象 @return {boolean|布尔型} function main(){ var rect = new Rect(); rect.left = 10; rect.right = 200; rect.top = 10; rect.bottom = 400; var result = clickRandomRect(rect); if (result){ toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); clickCenter 点击区域中的中心坐标 @param rect 区域对象 @return {boolean|布尔型} function main(){ var rect = new Rect(); rect.left = 10; rect.right = 200; rect.top = 10; rect.bottom = 400; var result = clickCenter(rect); if (result){ toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); clickText 点击文本 @param text 文本 @return {boolean|布尔型} function main(){ var result = clickText(\"设置\"); if (result){ toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); longClick 长点击选择器 @param selectors 选择器对象 @return {boolean|布尔型} function main(){ var selector = text(\"我是文本\"); var result = longClick(selector); if (result){ toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); longClickPoint 长点击坐标 @param x x坐标 @param y y坐标 @return {boolean|布尔型} function main(){ var result = longClickPoint(100,100); if (result){ toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 多点触摸 multiTouch 多点触摸 多点触摸 触摸参数: action :一般情况下 按下为0，弹起为1，移动为2 x: X坐标 y: Y坐标 pointer：设置第几个手指触摸点，分别是 1，2，3等，代表第n个手指 delay: 该动作延迟多少毫秒执行 @param touch1 第1个手指的触摸点数组,例如：[{\"action\":0,\"x\":1,\"y\":1,\"pointer\":1,\"delay\":20},{\"action\":2,\"x\":1,\"y\":1,\"pointer\":1,\"delay\":20}] @param touch2 第2个手指的触摸点数组 @param touch3 第3个手指的触摸点数组 @param timeout 多点触摸执行的超时时间，单位是毫秒 @return boolean|布尔型 function main() { utils.openAppByName(\"抖音短视频\"); sleep(3000); //第一种数组式的写法 var touch1 = [ {\"action\": 0, \"x\": 500, \"y\": 1200, \"pointer\": 1, \"delay\": 1}, { \"action\": 2, \"x\": 500, \"y\": 1100, \"pointer\": 1, \"delay\": 20 }, { \"action\": 2, \"x\": 500, \"y\": 1000, \"pointer\": 1, \"delay\": 20 }, { \"action\": 1, \"x\": 1, \"y\": 1, \"pointer\": 1, \"delay\": 20 }]; //第二种链式调用方法 var touch2 = MultiPoint .get() .action(0).x(500).y(1200).pointer(1).delay(1) .next() .action(2).x(500).y(1100).pointer(1).delay(1) .next() .action(2).x(500).y(1000).pointer(1).delay(1) .next() .action(2).x(500).y(900).pointer(1).delay(1) .next() .action(1).x(500).y(800).pointer(1).delay(1); var touch1 = MultiPoint .get() .action(0).x(300).y(1200).pointer(2).delay(1) .next() .action(2).x(300).y(1100).pointer(2).delay(1) .next() .action(2).x(300).y(1000).pointer(2).delay(1) .next() .action(2).x(300).y(900).pointer(2).delay(1) .next() .action(1).x(300).y(800).pointer(2).delay(1); var x = multiTouch(touch1, touch2, null, 30000); logd(\"xxs \" + x); } main(); 滑动函数 swipe 通过选择器滑动节点 @param selectors 节点选择器 @param endX 结束的X坐标 @param endY 结束的Y坐标 @param duration 持续时长 单位毫秒 @return 布尔型 true 代表成功 false 代表失败 function main(){ var selectors = text(\"我是文本\"); var result = swipe(selectors,100,100,200); if (result){ toast(\"滑动成功\"); } else { toast(\"滑动失败\"); } } main(); swipeToPoint 从一个坐标滑动到另一个坐标 @param startX 起始坐标的X轴值 @param startY 起始坐标的Y轴值 @param endX 结束坐标的X轴值 @param endY 结束坐标的Y轴值 @param duration 持续时长 单位毫秒 @return 布尔型 true 滑动成功, false 滑动失败 function main(){ var result = swipeToPoint(10,10,100,100,200); if (result){ toast(\"滑动成功\"); } else { toast(\"滑动失败\"); } } main(); isScrollEnd 是否滚动到底部了，如果查不到元素也会返回false @param distance 滚动方向 UP,DOWN,LEFT,RIGHT @param selectors 选择器 @return false 代表未滚动到位，true 代表滚动完成了 function main(){ var selectors = clz(\"android.widget.ListView\"); var result = isScrollEnd(\"UP\",selectors); if (result){ toast(\"滚动完成\"); } else { toast(\"滚动未完成\"); } } main(); 拖动函数 drag 从一个坐标到另一个坐标的拖动 @param startX 起始坐标的X轴值 @param startY 起始坐标的Y轴值 @param endX 结束坐标的X轴值 @param endY 结束坐标的Y轴值 @param duration 持续时长 单位毫秒 @return 布尔型 true 拖动成功, false 拖动失败 function main(){ var result = drag(10,10,100,100,200); if (result){ toast(\"拖动成功\"); } else { toast(\"拖动失败\"); } } main(); dragTo 通过选择器拖动某个元素到目标元素 @param selectors 选择器 {@link S} @param destObj 目标元素选择器 @param duration 持续时长 单位毫秒 @return 布尔型 true 成功 false 失败 function main(){ var selectors = text(\"设置\"); var destObj = text(\"日历\"); var result = dragTo(selectors,destObj,200); if (result){ toast(\"拖动成功\"); } else { toast(\"拖动失败\"); } } main(); dragToPoint 通过选择器拖动某个元素到目标X Y 坐标 @param selectors 原始元素选择器 @param endX 目标 X 坐标 @param endY 目标 Y 坐标 @param duration 持续时长 单位毫秒 @return 布尔型 true 成功 false 失败 function main(){ var selectors = text(\"设置\"); var result = dragToPoint(selectors,100,100,200); if (result){ toast(\"拖动成功\"); } else { toast(\"拖动失败\"); } } main(); 输入数据 currentIsOurIme 当前是否是我们的输入法 @return {boolean|布尔型} function main(){ var result = currentIsOurIme(); if (result){ toast(\"是\"); } else { toast(\"否\"); } } main(); inputText 通过选择器输入数据 @param selectors 选择器 @param content 数据字符串 @return {boolean|布尔型} function main(){ var selectors= clz(\"android.widget.EditText\"); var result = inputText(selectors,\"我是内容\"); if (result){ toast(\"是\"); } else { toast(\"否\"); } } main(); imeInputText 使用输入法输入内容，前提是已经设置本程序的输入法为默认输入法 @param selectors 选择器 @param content 数据字符串 @return {boolean|布尔型} function main(){ var selectors= clz(\"android.widget.EditText\"); var result = imeInputText(selectors,\"我是内容\"); if (result){ toast(\"是\"); } else { toast(\"否\"); } } main(); pasteText 通过选择器粘贴数据 @param selectors 选择器 @param content 数据字符串 @return {boolean|布尔型} function main(){ var selectors= clz(\"android.widget.EditText\"); var result = pasteText(selectors,\"我是内容\"); if (result){ toast(\"是\"); } else { toast(\"否\"); } } main(); clearTextField 清除文本数据 @param selectors 节点选择器 @return {boolean|布尔型} function main(){ var selectors= clz(\"android.widget.EditText\"); var result = clearTextField(selectors); if (result){ toast(\"是\"); } else { toast(\"否\"); } } main(); 节点操作 has 通过选择器判断元素是否存在 @param selectors 选择器 @return {null|布尔型} function main(){ var selectors = text(\"设置\"); var result = has(selectors); if (result){ toast(\"存在节点\"); } else { toast(\"不存在节点\"); } } main(); waitExistActivity 等待activity界面出现 @param activity 界面名称 @param timeout 超时时间，单位毫秒 @return {null|布尔型} function main(){ var ac = \"com.ss.android.ugc.aweme.main.MainActivity\"; var result = waitExistActivity(ac,10000); if (result){ toast(\"存在界面\"); } else { toast(\"不存在界面\"); } } main(); waitExistNode 通过选择器判断并等待元素是否存 @param selectors 选择器 @param timeout 超时时间，单位毫秒 @return {null|布尔型} function main(){ var selectors = text(\"设置\"); var result = waitExistNode(selectors,10000); if (result){ toast(\"存在节点\"); } else { toast(\"不存在节点\"); } } main(); getText 获取选择器得到的文本数据 @param selectors 选择器 @return {字符串数组|null|字符串集合} function main(){ var selectors = clz(\"android.widget.TextView\"); var result = getText(selectors); toast(\"result:\"+result); } main(); getNodeInfo 获取节点信息 @param selectors 选择器 @param timeout 等待时间，单位是毫秒 @return {null|NodeInfo数组|节点信息集合} function main(){ var result = clz(\"android.widget.TextView\").getNodeInfo(10*1000); toast(\"result:\"+result); } main(); getNodeAttrs 获取节点属性信息 @param selectors 选择器 @param attr 属性值,例如 text,className，更多的属性请参考NodeInfo对象属性 @return {null|字符串数组|Rect对象数组} function main(){ var selectors = clz(\"android.widget.TextView\"); //获取所有text属性 var result = getNodeAttrs(selectors,\"text\"); toast(\"result:\"+result); //获取所有bounds属性 result = getNodeAttrs(selectors,\"bounds\"); toast(\"result:\"+result); } main(); getOneNodeInfo 通过选择器 获取第一个节点信息 @param selectors 选择器 @param timeout 等待时间，单位是毫秒 @return NodeInfo 对象或者null function main(){ var result = clz(\"android.widget.TextView\").getOneNodeInfo(10*1000); toast(\"result:\"+result); if (result){ result.click(); } } main(); setFetchNodeMode 设置获取节点的模式 @param mode 1 是增强型， 2 是快速型，默认是增强型 @param fetchInvisibleNode 是否抓取隐藏的元素，默认不抓取 @param fetchNotImportantNode 是否抓取不重要的元素 @return {boolean|*} function main(){ var result = setFetchNodeMode(1,true,true); toast(\"result:\"+result); } main(); dumpXml 将元素节点变成XML @return string string|null function main(){ var result = dumpXml(); if (result){ toast(\"ok\"); } else { toast(\"no\"); } } main(); 系统按键相关 home 返回主页 @return {null|布尔型} function main(){ var result = home(); if (result){ toast(\"成功\"); } else { toast(\"失败\"); } } main(); back 返回键 @return {null|布尔型} function main(){ var result = back(); if (result){ toast(\"成功\"); } else { toast(\"失败\"); } } main(); openNotification 打开通知栏 @return {null|布尔型} function main(){ var result = openNotification(); if (result){ toast(\"成功\"); } else { toast(\"失败\"); } } main(); openQuickSettings 打开快速设置 @return {null|布尔型} function main(){ var result = openQuickSettings(); if (result){ toast(\"成功\"); } else { toast(\"失败\"); } } main(); recentApps 最近APP任务按键 @return {null|布尔型} function main(){ var result = recentApps(); if (result){ toast(\"成功\"); } else { toast(\"失败\"); } } main(); getRunningPkg 取得当前运行的App包名 @return {字符串|null} function main(){ var result = getRunningPkg(); } main(); getRunningActivity 取得当前运行的Activity类名 @return {字符串|null} function main(){ var result = getRunningActivity(); } main(); 通知栏 requestNotificationPermission 请求监听状态栏的权限 @param timeout 请求权限超时时间 单位是秒 @return true 代表请求权限成功，false代表失败 function main(){ var result = requestNotificationPermission(10); toast(\"是否有权限:\"+result); } main(); hasNotificationPermission 检查是否含有状态栏监听权限 @return true 代表请求权限成功，false代表失败 function main(){ var result = hasNotificationPermission(); toast(\"是否有权限:\"+result); } main(); getLastNotification 获取最近通知栏对象 @param pkg 指定包名 @param size 指定获取的条数 @return {NotificationInfo数组|null} function main(){ //获取微信100条通知栏记录 var result = getLastNotification(\"com.tencent.mm\",100); toast(\"结果:\"+result); } main(); shotNotification 将通知发射处理，相当于点击了通知栏 @param seqId @return {boolean|布尔型} function main(){ //获取微信1条通知，然后进行点击 var result = getLastNotification(\"com.tencent.mm\",1); if (result!=null && result.length>0){ var s = shotNotification(result[0].seqId); toast(\"结果:\"+s); } } main(); cancelNotification 将通知进行取消操作 @param seqId @return {boolean|布尔型} function main(){ //获取微信1条通知，然后进行取消 var result = getLastNotification(\"com.tencent.mm\",1); if (result!=null && result.length>0){ var s = cancelNotification(result[0].seqId); toast(\"结果:\"+s); } } main(); getLastToast 获取toast数据 @param pkg 指定包名 @param size 指定获取的条数 @return {null|ToastInfo数组} function main(){ var result = getLastToast(\"com.tencent.mm\",100); toast(\"结果:\"+result); } main(); 悬浮窗日志 requestFloatViewPermission 请求展示浮窗的权限 @param timeout 请求权限超时时间 单位是秒 @return true 代表请求权限成功，false代表失败 function main(){ var result = requestFloatViewPermission(10); toast(\"是否有权限:\"+result); } main(); hasFloatViewPermission 检查是否含有浮窗权限 @return true 代表请求权限成功，false代表失败 function main(){ var result = hasFloatViewPermission(); toast(\"是否有权限:\"+result); } main(); showFloatView 展示浮窗（如果是开发工具调试，请先预览一下工程，然后运行脚本，避免读取不到path文件内容的情况） @param params js的map对象，包含的 var map = {\"path\":\"main.html\",\"tag\":\"test\"}; 类似这样的参数 参数解析: tag:字符串 悬浮窗唯一定位的标示 path:字符串 IEC 中的布局文件 title:字符串 悬浮窗标题 titleBg:字符串 悬浮窗背景，16进制，例如#888888，或者#88000000 x:整型 悬浮窗起始X坐标 y:整型 悬浮窗起始Y坐标 w:整型 悬浮窗起始宽度 h:整型 悬浮窗起始高度 @return true 代表请求权限成功，false代表失败 function main(){ var m = { \"path\": \"main.html\", \"tag\": \"tag\", \"title\": \"sss\", \"titleBg\": \"#888888\", \"x\": 10, \"y\": 10, \"w\": 100, \"h\": 200 }; var xd = showFloatView(m); logd(\"showFloatView \" + xd); } main(); closeFloatView 关闭浮窗 @param tag showFloatView 使用的tag参数，对悬浮窗唯一定位的 @return true 成功，false代表失败 function main(){ var m = { \"path\": \"main.html\", \"tag\": \"tag\", \"title\": \"sss\", \"titleBg\": \"#888888\", \"x\": 10, \"y\": 10, \"w\": 100, \"h\": 200 }; var xd = showFloatView(m); logd(\"showFloatView \" + xd); sleep(3000); closeFloatView(\"tag\"); } main(); closeAllFloatView 关闭所有悬浮窗，但不包含日志悬浮窗 @return true 成功，false代表失败 function main(){ var m = { \"path\": \"main.html\", \"tag\": \"tag\", \"title\": \"sss\", \"titleBg\": \"#888888\", \"x\": 10, \"y\": 10, \"w\": 100, \"h\": 200 }; var xd = showFloatView(m); logd(\"showFloatView \" + xd); sleep(3000); closeAllFloatView(); } main(); showLogWindow 展示日志浮窗 @return true 代表请求权限成功，false代表失败 function main(){ var result = showLogWindow(); toast(\"是否展示:\"+result); } main(); closeLogWindow 关闭日志浮窗 @return true 代表请求权限成功，false代表失败 function main(){ closeLogWindow(); } main(); setLogViewSize 设置日志窗口大小 @param w 宽度 @param h 高度 @param textSize 日志的字体大小 @param backgroundColor 背景颜色，例如#336699 function main(){ setLogViewSize(500,600,14,\"#FFFFFF\"); } main(); setLogText 展示消息到悬浮窗日志中，颜色是白色的 @param msg 消息 function main(){ var result = setLogText(\"开始运行...\"); } main(); 定时任务 startJob 开启定时 开启一个定时脚本任务 @param tag 任务的唯一标示，不能为空，脚本中可以使用readConfigString(\"jobTaskTag\")获取当前tag值，判断是那个任务过来执行的 @param execTime 定时时间格式: 2020-04-17 19:20:00，或者直接是秒数字，例如 3，代表3秒后 @param cancelBeforeRunning @return 整型 jobid function main(){ var time=\"2020-04-17 09:00:00\"; //使用日期开启一个任务 var id =startJob(\"task1\",time,true); logd(\"job id \"+id); //使用秒数开启，60秒后执行一个任务 var id2 =startJob(\"task2\",\"60\",true); logd(\"job id \"+id2); } main(); cancelAllJob 取消所有定时 取消所有定时 @return bool true 代表有任务被取消 function main(){ var result = cancelAllJob(); logd(result); } main(); cancelJob 取消指定TAG定时 通过tag对定时任务进行取消 @param tag tag名称，startJob的时候tag参数的值 @return bool true 代表有任务被取消 function main(){ var result = cancelJob(\"task1\"); logd(result); } main(); getAllJobTag 获取所有定时标签 取得所有的定时任务标签 @return 字符串数组或者null function main(){ var result = getAllJobTag(); logd(result); } main(); 其他函数 random 随机函数 取得某个范围的随机值 @param min 最小值 @param max 最大值 @return 整型 在min和max中间的值, 包含最大和最小值 function main(){ var result = random(100,1000); sleep(result); } main(); "},"zh-cn/funcs/global/selector-node.html":{"url":"zh-cn/funcs/global/selector-node.html","title":"选择器&节点","keywords":"","body":"说明 这个章节主要讲解选择器类使用和节点信息类 选择器对象 选择器对象是支持级联选择，可以在无法直接选择到元素的时候，先通过选择父级后再选择子级 选择器部分支撑正则匹配，请参考java的正则语法，教程 基本用法 S.get() 除了基本用法，还可以使用属性名方法直接快捷选择 function main(){ //获取选择器对象,但是这个选择器是没有任何条件属性的 var selector = S.get(); } main(); text属性选择 全文本匹配 function main(){ //获取选择器对象 var selector = text(\"设置\"); click(selector); } main(); 正则匹配 function main(){ //获取选择器对象 var selector = textMatch(\".*设置.*\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); id 属性选择 全量匹配 function main(){ //获取选择器对象 var selector = id(\"com.tencent.mm:id/a1\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 正则匹配 function main(){ //获取选择器对象 var selector = idMatch(\".*id8.*\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); clz 属性选择 全量匹配 function main(){ //获取选择器对象 var selector = clz(\"android.widget.TextView\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 正则匹配 function main(){ //获取选择器对象 var selector = clzMatch(\".*TextView.*\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); pkg 属性选择 全量匹配 function main(){ //获取选择器对象 var selector = pkg(\"com.tencent.mm\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 正则匹配 function main(){ //获取选择器对象 var selector = pkgMatch(\".*tencent.*\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); desc 文本属性选择 全量匹配 function main(){ //获取选择器对象 var selector = desc(\"我是描述\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 正则匹配 function main(){ //获取选择器对象 var selector = descMatch(\".*描述.*\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main() 深度和绘制顺序匹配 主要目标是为了消除动态ID(例如抖音等)、相同的ID带来的问题 drawingOrder function main(){ //获取选择器对象 var selector = drawingOrder(1); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); depth function main(){ //获取选择器对象 var selector = depth(1); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 其他匹配规则 bounds 范围匹配 按照属性 bounds 进行范围 * @param left 范围左边数值 @param top 范围上边数值 @param right 范围右边数值 @param bottom 范围底边数值 @return {S} 节点选择器 function main(){ //获取选择器对象 0 - 800以内范围内的控件 var selector = bounds(0,0,800,800); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); checkable function main(){ //获取选择器对象 var selector = checkable(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); checked function main(){ //获取选择器对象 var selector = checked(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); clickable function main(){ //获取选择器对象 var selector = clickable(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); longClickable function main(){ //获取选择器对象 var selector = longClickable(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); scrollable function main(){ //获取选择器对象 var selector = scrollable(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); focusable function main(){ //获取选择器对象 var selector = focusable(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); enabled function main(){ //获取选择器对象 var selector = enabled(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); focused function main(){ //获取选择器对象 var selector = focused(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); selected function main(){ //获取选择器对象 var selector = selected(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); index function main(){ //获取选择器对象 var selector = index(1); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); childCount function main(){ //获取选择器对象 var selector = childCount(1); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 级联匹配 function main(){ //获取选择器对象 //选择 父级为android.widget.ScrollView下的子节点clz=android.widget.CheckBox所有节点 var selector = clz(\"android.widget.ScrollView\") .child() .clz(\"android.widget.CheckBox\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 多属性匹配 function main(){ //获取选择器对象， //选择包含\"选择器\"并且checked=true并且类名=android.widget.CheckBox的元素 var selector = text(\".*选择器.*\") .checked(true) .clz(\"android.widget.CheckBox\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 节点信息类 节点对象NodeInfo，可以通过获取getNodeInfo方法获取到节点信息的数组,节点包含的信息如下 id: 字符串，资源的ID clz: 字符串，视图类名，例如 android.widget.TextView pkg: 字符串，包名，例如com.tencent.mm desc: 字符串，内容描述 text: 字符串，文本 checkable: 布尔型，是否可选中 checked: 布尔型，是否选中 clickable: 布尔型，是否可点击 enabled: 布尔型，是否启用 focusable: 布尔型，是否可获取焦点 focused: 布尔型，是否聚焦 longClickable: 布尔型，是否可长点击 scrollable: 布尔型，是否滚动 selected: 布尔型，是否被选择 childCount: 整型，子节点的个数 index: 整型 节点的索引 depth: 整型 节点的层级深度 drawingOrder: 整型 节点的绘制顺序 bounds: Rect型，空间对象 top: 整型，顶部位置 bottom: 整型，底部位置 left: 整型，左边位置 right: 整型，右边位置 visibleBounds: Rect型，可视空间对象 top: 整型，顶部位置 bottom: 整型，底部位置 left: 整型，左边位置 right: 整型，右边位置 获取一个节点 getOneNodeInfo 通过选择器 获取第一个节点信息 @param timeout 等待时间，单位是毫秒, 如果是0，代表不等待 @return NodeInfo 对象 或者null function main(){ //获取选择器对象 //选择 节点 clz=android.widget.CheckBox所有节点， var node = clz(\"android.widget.CheckBox\").getOneNodeInfo(10000); if (node) { var x= node.click(); logd(x); } else { toast(\"无节点\"); } } main(); 获取多个节点 getNodeInfo 获取节点信息 @param timeout 等待时间，单位是毫秒, 如果是0，代表不等待 @return NodeInfo 节点信息集合 function main(){ //获取选择器对象 //选择 节点 clz=android.widget.CheckBox所有节点， var node = clz(\"android.widget.CheckBox\").getNodeInfo(10000); logd(node); } main(); 获取父节点 parent 该节点的父级节点 @return NodeInfo 对象 或者null function main(){ //获取选择器对象 //选择 节点 clz=android.widget.CheckBox所有节点 var node = clz(\"android.widget.CheckBox\").getOneNodeInfo(10000); if (node) { var x= node.parent(); logd(x); } else { toast(\"无节点\"); } } main(); 获取子节点 child 取得单个子节点 @param index 子节点索引 @return NodeInfo 对象 或者null function main(){ //选择 节点 clz=android.widget.ViewGroup 所有节点 var node = clz(\"android.widget.ViewGroup\").getOneNodeInfo(10000); if (node) { var x= node.child(0); logd(x); } else { toast(\"无节点\"); } } main(); 获取所有子节点 allChildren 获取所有子节点 @return NodeInfo 节点集合 function main(){ //选择 节点 clz=android.widget.ViewGroup 所有节点 var node = clz(\"android.widget.ViewGroup\").getOneNodeInfo(10000); if (node) { var x= node.allChildren(); logd(x); } else { toast(\"无节点\"); } } main(); 所有兄弟节点 siblings 当前节点的所有兄弟节点 @return NodeInfo 节点集合 function main(){ //选择 节点 clz=android.widget.ViewGroup 所有节点 var node = clz(\"android.widget.ViewGroup\").getOneNodeInfo(10000); if (node) { var x= node.siblings(); logd(x); } else { toast(\"无节点\"); } } main(); 前面的兄弟节点 previousSiblings 在当前节点前面的兄弟节点 @return NodeInfo 节点集合 function main(){ //选择 节点 clz=android.widget.ViewGroup 所有节点 var node = clz(\"android.widget.ViewGroup\").getOneNodeInfo(10000); if (node!=null) { var x= node.previousSiblings(); logd(x); } else { toast(\"无节点\"); } } main(); 后面的兄弟节点 nextSiblings 在当前节点后面的兄弟节点 @return NodeInfo 节点集合 function main(){ //选择 节点 clz=android.widget.ViewGroup 所有节点 var node = clz(\"android.widget.ViewGroup\").getOneNodeInfo(10000); if (node) { var x= node.nextSiblings(); logd(x); } else { toast(\"无节点\"); } } main(); 节点区域随机点击 click 点击节点 @return bool, true 成功 ,false 失败 function main(){ //获取选择器对象 //选择 节点 clz=android.widget.CheckBox所有节点 var node = clz(\"android.widget.CheckBox\").getOneNodeInfo(10000); if (node) { node.click() } else { toast(\"无节点\"); } } main(); 节点点击中心点 clickCenter 节点点击中心点 @return bool, true 成功 ,false 失败 function main(){ //获取选择器对象 //选择 节点 clz=android.widget.CheckBox所有节点 var node = clz(\"android.widget.CheckBox\").getOneNodeInfo(10000); if (node) { node.clickCenter(); } else { toast(\"无节点\"); } } main(); 节点长点击 longClick 长点击节点 @return bool, true 成功 ,false 失败 function main(){ //获取选择器对象 //选择 节点 clz=android.widget.CheckBox所有节点 var node = clz(\"android.widget.CheckBox\").getOneNodeInfo(10000); if (node) { node.longClick() } else { toast(\"无节点\"); } } main(); 节点输入 inputText 对某个节点输入数据 @param content 要输入的内容 @return bool, true 成功 ,false 失败 function main(){ //获取选择器对象 //选择 节点 clz=android.widget.EditText 所有节点 var node = clz(\"android.widget.EditText\").getOneNodeInfo(10000); if (node) { node.inputText(\"内容\") } else { toast(\"无节点\"); } } main(); 节点输入法输入 imeInputText 使用输入法对某个节点输入数据，前提是已经设置本程序的输入法为默认输入法 @param content 要输入的内容 @return bool, true 成功 ,false 失败 function main(){ //获取选择器对象 //选择 节点 clz=android.widget.EditText 所有节点 var node = clz(\"android.widget.EditText\").getOneNodeInfo(10000); if (node) { node.imeInputText(\"内容\") } else { toast(\"无节点\"); } } main(); 节点数据清除 clearText 清除节点文本数据 function main(){ //获取选择器对象 //选择 节点 clz=android.widget.EditText 所有节点 var node = clz(\"android.widget.EditText\").getOneNodeInfo(); if (node) { var r =node.clearText(); logd(\"r -=> \"+r); } else { toast(\"无节点\"); } } main(); 节点刷新 refresh 该方法会刷新节点缓存 function main(){ //获取选择器对象 //选择 节点 clz=android.widget.EditText 所有节点 var node = clz(\"android.widget.EditText\").getOneNodeInfo(10000); if (node) { node.refresh(); } else { toast(\"无节点\"); } } main(); 节点有效判断 isValid 节点信息是否有效 @return bool|布尔型 true代表有 function main(){ //获取选择器对象 //选择 节点 clz=android.widget.EditText 所有节点 var node = clz(\"android.widget.EditText\").getOneNodeInfo(10000); if (node) { var x =node.isValid(); toast(\"节点有效性:\"+x); } else { toast(\"无节点\"); } } main(); "},"zh-cn/funcs/acevent-api.html":{"url":"zh-cn/funcs/acevent-api.html","title":"无障碍事件","keywords":"","body":"说明 无障碍模式需要打开无障碍服务 并且手机是7.0以上版本，如果使用电脑激活过，会自动打开无障碍服务哦！ 无障碍模式下，API限制较多，无法全部达到代理模式下的功能 函数调用请看全局函数 "},"zh-cn/funcs/event-api.html":{"url":"zh-cn/funcs/event-api.html","title":"代理事件","keywords":"","body":"说明 代理事件模块运行的所有函数，是需要使用电脑激活才能使用的，免root 代理事件模块的对象前缀是agentEvent，例如 agentEvent.clickPoint这样调用 这里列出来的是代理模式特有的函数，其他调用可以直接使用全局函数 输入数据 setCurrentIme 设置当前的输入法，用于输入数据 @return {boolean|布尔型} function main(){ var result = agentEvent.setCurrentIme(); if (result){ toast(\"是\"); }else { toast(\"否\"); } } main(); restoreIme 恢复到之前的输入法 @return {boolean|布尔型} function main(){ var result = agentEvent.restoreIme(); if (result){ toast(\"是\"); }else { toast(\"否\"); } } main(); 截图 fastScreenshot 快速截屏幕的截图 @param filename 文件路径 @return 字符串 截图的路径 function main(){ var result = agentEvent.fastScreenshot(\"/sdcard/a.jpg\"); toast(\"result:\"+result); } main(); takeNodeScreenshot 通过选择器截取选中的元素截图 @param selectors {@link NodeSelectors}元素选择器 @param filePath 最终文件路径 @return 布尔型 true 代表成功 false代表失败 function main(){ var selectors = clz(\"android.widget.TextView\"); var result = agentEvent.takeNodeScreenshot(selectors,\"/sdcard/a.png\"); toast(\"result:\"+result); } main(); takeScreenshot 获取屏幕截图并保存到文件中 @param fileName 文件路径 @return 布尔型 截图成功返回 true function main(){ var result = agentEvent.takeScreenshot(\"/sdcard/a.png\"); toast(\"result:\"+result); } main(); takeScreenshotImage 截图返回autoimage对象 ,(底层命令截图 速度大概1-2秒) @return AutoImage 对象或者null function main(){ var result = agentEvent.takeScreenshotImage(); toast(\"result:\"+result); } main(); takeScreenshotMore 取得一张屏幕的截图 @param filename 文件路径 @param scale 缩放比例 0 ~ 1 @param quality 图片质量 0 - 100 @return 字符串 截图的路径 function main(){ var result = agentEvent.takeScreenshotMore(\"/sdcard/a.png\",1,50); toast(\"result:\"+result); } main(); 手势及输入事件 inputEvent 执行输入事件 @param action 动作，请看类: MotionEvent.ACTION_* @param x x坐标 @param y y坐标 @param metaState 控制按键，比如说shift键，alt键，ctrl键等控制键, 0或者 1 any meta info @return 布尔型 true 代表成功 false代表失败 function main(){ var result = agentEvent.inputEvent(1,10,10,0); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); touchDown 执行按下输入事件 @param x x坐标 @param y y坐标 @return 布尔型 true 代表成功 false代表失败 function main(){ var result = agentEvent.touchDown(10,10); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); touchMove 执行移动输入事件 @param x x坐标 @param y y坐标 @return 布尔型 true 代表成功 false代表失败 function main(){ var result = agentEvent.touchMove(10,10); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); touchUp 执行弹起输入事件 @param x x坐标 @param y y坐标 @return 布尔型 true 代表成功 false代表失败 function main(){ var result = agentEvent.touchUp(10,10); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); multiTouch 多点触摸 多点触摸 触摸参数: action :一般情况下 按下为0，弹起为1，移动为2 x: X坐标 y: Y坐标 pointer：设置第几个手指触摸点，分别是 1，2，3等，代表第n个手指 delay: 该动作延迟多少毫秒执行 @param touch1 第1个手指的触摸点数组,例如：[{\"action\":0,\"x\":1,\"y\":1,\"pointer\":1,\"delay\":20},{\"action\":2,\"x\":1,\"y\":1,\"pointer\":1,\"delay\":20}] @param touch2 第2个手指的触摸点数组 @param touch3 第3个手指的触摸点数组 @param timeout 多点触摸执行的超时时间，单位是毫秒 @return boolean|布尔型 function main() { utils.openAppByName(\"抖音短视频\"); sleep(3000); //第一种数组式的写法 var touch1 = [ {\"action\": 0, \"x\": 500, \"y\": 1200, \"pointer\": 1, \"delay\": 1}, { \"action\": 2, \"x\": 500, \"y\": 1100, \"pointer\": 1, \"delay\": 20 }, { \"action\": 2, \"x\": 500, \"y\": 1000, \"pointer\": 1, \"delay\": 20 }, { \"action\": 1, \"x\": 1, \"y\": 1, \"pointer\": 1, \"delay\": 20 }]; //第二种链式调用方法 var touch2 = MultiPoint .get() .action(0).x(500).y(1200).pointer(1).delay(1) .next() .action(2).x(500).y(1100).pointer(1).delay(1) .next() .action(2).x(500).y(1000).pointer(1).delay(1) .next() .action(2).x(500).y(900).pointer(1).delay(1) .next() .action(1).x(500).y(800).pointer(1).delay(1); var touch1 = MultiPoint .get() .action(0).x(300).y(1200).pointer(2).delay(1) .next() .action(2).x(300).y(1100).pointer(2).delay(1) .next() .action(2).x(300).y(1000).pointer(2).delay(1) .next() .action(2).x(300).y(900).pointer(2).delay(1) .next() .action(1).x(300).y(800).pointer(2).delay(1); var x = agentEvent.multiTouch(touch1, touch2, null, 30000); logd(\"xxs \" + x); } main(); pressKey 模拟按键,例如home back等 @param key 对应的值分别为 home, back, left, right, up, down, center, menu, search, enter, delete(or del), recent(recent apps), volume_up, volume_down, volume_mute, camera, power @return 布尔型 true 成功, false 失败 function main(){ var result = agentEvent.pressKey(\"home\"); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); pressKeyCode 模拟键盘输入 @param keyCode 键盘的key，参见KeyEvent.KEYCODE_* @return 布尔型 true 代表成功，false 代表失败 function main(){ var result = agentEvent.pressKeyCode(65); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); pressKeyCodeWithMetaState 模拟键盘输入 @param keyCode keyCode 键盘的key，参见KeyEvent.KEYCODE_* @param metaState metaState 控制按键，比如说shift键，alt键，ctrl键等控制键, 0或者 1 @return 布尔型 true 代表成功，false 代表失败。 function main(){ var result = agentEvent.pressKeyCodeWithMetaState(65,1); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); 系统按键相关 menu 打开菜单 @return {null|布尔型} function main(){ var result = agentEvent.menu(); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); enter Enter键 @return {null|布尔型} var result = agentEvent.enter(); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); ``` delete 删除键 @return {null|布尔型} function main(){ var result = agentEvent.delete(); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); search 搜索 @return {null|布尔型} function main(){ var result = agentEvent.search(); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); orientationRight 向右旋转 @return {字符串|null} function main(){ agentEvent.orientationRight(); } main(); orientationNatural 自然状态 @return {字符串|null} function main(){ agentEvent.orientationNatural(); } main(); orientationNatural 自然状态 @return {字符串|null} function main(){ agentEvent.orientationNatural(); } main(); 屏幕控制 closeScreen 关闭屏幕，屏幕不亮，但是依然可以自动点击，不同于sleepScreen @return 布尔型 true 成功，false 失败 function main(){ var x =agentEvent.closeScreen(); } main(); lightScreen 点亮屏幕，和closeScreen相反的动作 @return 布尔型 true 成功，false 失败 function main(){ var x =agentEvent.lightScreen(); } main(); isScreenOn 检查屏幕是否是点亮的 @return 布尔型 true 成功，false 失败 function main(){ var x =agentEvent.isScreenOn(); } main(); wakeUp 唤醒设备 @return 布尔型 true 成功，false 失败 function main(){ var x =agentEvent.wakeUp(); } main(); 其他函数 其他包括 滚动，缩放，flip手势等，请查看js代码 "},"zh-cn/funcs/image-api.html":{"url":"zh-cn/funcs/image-api.html","title":"图色函数","keywords":"","body":"说明 截图函数需要Andrioid 5.0 以上版本才能使用 无障碍模式下截图是需要权限的，如果弹出了运行截图，请授权 代理模式下的截图不需要权限，建议长期运行使用代理模式 图色模块的对象前缀是image，例如 image.requestScreenCapture()这样调用 图色模块需要对颜色进行查找，开发工具自带找色功能，请参考找色找图操作 申请截图 image.requestScreenCapture 向系统申请屏幕截图权限，返回是否请求成功。 第一次使用该函数会弹出截图权限请求，建议选择“总是允许”。 这个函数只是申请截图权限，并不会真正执行截图，真正的截图函数是captureScreen()。 该函数在截图脚本中只需执行一次，而无需每次调用captureScreen()都调用一次。 建议在本软件界面运行该函数，在其他软件界面运行时容易出现一闪而过的黑屏现象。 @return true 代表成功 false代表失败 function main() { var request = image.requestScreenCapture(); if (request){ toast(\"申请成功\"); }else { toast(\"申请失败\"); } } main(); image.requestScreenCaptureOri 向系统申请屏幕截图权限，返回是否请求成功。 @param orientation 屏幕方向，1 代表竖屏 2 代表横屏 @return true 代表成功 false代表失败 function main() { var request = image.requestScreenCaptureOri(1); if (request){ toast(\"申请成功\"); }else { toast(\"申请失败\"); } } main(); image.releaseScreenCapture 释放截屏请求 function main() { image.releaseScreenCapture(); } main(); 截图 image.captureScreen 截取当前屏幕并返回一个Image对象。 没有截图权限时执行该函数会返回null 两次调用可能返回相同的Image对象。这是因为设备截图的更新需要一定的时间，短时间内（一般来说是16ms）连续调用则会返回同一张截图。 截图需要转换为Bitmap格式，从而该函数执行需要一定的时间(0~20ms)。 另外在requestScreenCapture()执行成功后需要一定时间后才有截图可用，因此如果立即调用captureScreen()，会等待一定时间后(一般为几百ms)才返回截图。 如果区域空或则有负数的，就会是全屏 @param retryNumber 重试次数，直到能截到图为止，默认是3 @param x 截图的起始X坐标 @param y 截图的起始Y坐标 @param w 截图的宽度，从X坐标算起 @param h 截图的高度，从Y坐标算起 @return AutoImage对象或者null function main() { var image = image.captureScreen(3,0,0,300,400); if (image!=null){ toast(\"截图成功\"); } else { toast(\"截图失败\"); } } main(); image.captureScreenToFile 截取当前屏幕并以PNG格式保存到path中。如果文件不存在会被创建；文件存在会被覆盖。 如果区域空或则有负数的，就会是全屏 @param retryNumber 重试次数，直到能截到图为止，默认是3 @param x 截图的起始X坐标 @param y 截图的起始Y坐标 @param w 截图的宽度，从X坐标算起 @param h 截图的高度，从Y坐标算起 @param path 截图保存路径 @return true 截图成功 false 代表不成功 function main() { var cap = image.captureScreenToFile(3,0,0,300,400,\"/sdcard/a.png\"); if (cap){ toast(\"截图成功\"); }else { toast(\"截图失败\"); } } main(); 找色 image.findColor 在图片中找到颜色和color完全相等的某个点，并返回该点的左边；如果没有找到，则返回null。 @param image 图片 @param color 要寻找的颜色 @param threshold 找色时颜色相似度的临界值，范围为0~255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255. @return Point 对象 function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var color = -15558949; var point = image.findColor(aimage, color, 0); if (point != null) { clickPoint(point.x, point.y); } } } main(); image.findColorEquals 在图片img指定区域中找到颜色和color完全相等的某个点，并返回该点的左边；如果没有找到，则返回null。 @param image 图片 @param color 要寻找的颜色 @return Point 坐标点或者null function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var color = -15558949; var point = image.findColorEquals(aimage, color); if (point != null) { clickPoint(point.x, point.y); } } } main(); image.findColorEqualsRegion 在图片img指定区域中找到颜色和color完全相等的某个点，并返回该点的左边；如果没有找到，则返回null。 @param image 图片 @param color 要寻找的颜色 @param rect 找色区域。是一个两个或四个元素的数组。(left,top)表示找色区域的左上角； right,bottom 表示找色区域的宽高。如果只有 rect 只有两个元素，则找色区域为(left,top)到屏幕右下角。如果不指定region选项，则找色区域为整张图片。 @return Point 坐标点或者null function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var color = -15558949; var rect = new Rect(); rect.left = 10; rect.right = 200; rect.top = 10; rect.bottom = 400; var point = image.findColorEqualsRegion(aimage, color, rect); if (point != null) { clickPoint(point.x, point.y); } } } main(); image.findColorRegion 在图片img指定区域中找到颜色和color完全相等的某个点，并返回该点的左边；如果没有找到，则返回null。 @param image 图片 @param color 要寻找的颜色 @param threshold 找色时颜色相似度的临界值，范围为0~255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255. @param rect 找色区域。是一个两个或四个元素的数组。(left,top)表示找色区域的左上角； right,bottom 表示找色区域的宽高。如果只有 region 只有两个元素，则找色区域为(left,top)到屏幕右下角。如果不指定 rect 选项，则找色区域为整张图片。 @return Point 坐标点或者null function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var color = -15558949; var rect = new Rect(); rect.left = 10; rect.right = 200; rect.top = 10; rect.bottom = 400; var point = image.findColorRegion(aimage, color,4, rect); if (point != null) { clickPoint(point.x, point.y); } } } main(); image.findMultiColors 多点找色，返回第一个找到的点，类似于按键精灵的多点找色 整张图片都找不到时返回null @param image 要找色的图片 @param firstColor 第一个点的颜色 @param threshold 找色时颜色相似度的临界值，范围为0~255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255. @param rect 找色区域。是一个两个或四个元素的数组。(left,top)表示找色区域的左上角； right,bottom 表示找色区域的宽高。如果只有 region 只有两个元素，则找色区域为(left,top)到屏幕右下角。如果不指定 rect 选项，则找色区域为整张图片。 @param points 表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color] @return Point 坐标点或者null function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var firstColor = -15558949; var colors = [4, 4, -15558949, 4, 12, -15558949, 4, 20, -15558949, 4, 28, -15558949, 4, 36, -15558949, 4, 44, -15558949, 13, 4, -15558949, 13, 12, -15558949, 13, 20, -15558949, 13, 28, -15558949, 13, 36, -15558949, 13, 44, -15558949, 22, 4, -15558949, 22, 12, -15558949, 22, 20, -15558949, 22, 28, -15558949, 22, 36, -15558949, 22, 44, -15558949, 31, 4, -15558949, 31, 12, -15558949, 31, 20, -15558949, 31, 28, -15558949, 31, 36, -15558949, 31, 44, -15558949, 40, 4, -15558949, 40, 12, -15558949, 40, 20, -15558949, 40, 28, -15558949, 40, 36, -15558949, 40, 44, -15558949, 49, 4, -15558949, 49, 12, -15558949, 49, 20, -15558949, 49, 28, -15558949, 49, 36, -15558949, 49, 44, -15558949]; var rect = new Rect(); rect.left = 10; rect.right = 200; rect.top = 10; rect.bottom = 400; var point = image.findMultiColors(aimage, firstColor, 4, rect, colors); if (point != null) { clickPoint(point.x, point.y); } } } main(); image.findMultiColorsCurrentScreen 多点找色,返回第一个找到的点，在当前屏幕中，类似于按键精灵的多点找色 整张图片都找不到时返回null @param firstColor 第一个点的颜色 @param threshold 找色时颜色相似度的临界值，范围为0~255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255. @param rect 找色区域。是一个两个或四个元素的数组。(left,top)表示找色区域的左上角； right,bottom 表示找色区域的宽高。如果只有 region 只有两个元素，则找色区域为(left,top)到屏幕右下角。如果不指定 rect 选项，则找色区域为整张图片。 @param points 表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color] @return Point 坐标点或者null function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var firstColor = -15558949; var colors = [4, 4, -15558949, 4, 12, -15558949, 4, 20, -15558949, 4, 28, -15558949, 4, 36, -15558949, 4, 44, -15558949, 13, 4, -15558949, 13, 12, -15558949, 13, 20, -15558949, 13, 28, -15558949, 13, 36, -15558949, 13, 44, -15558949, 22, 4, -15558949, 22, 12, -15558949, 22, 20, -15558949, 22, 28, -15558949, 22, 36, -15558949, 22, 44, -15558949, 31, 4, -15558949, 31, 12, -15558949, 31, 20, -15558949, 31, 28, -15558949, 31, 36, -15558949, 31, 44, -15558949, 40, 4, -15558949, 40, 12, -15558949, 40, 20, -15558949, 40, 28, -15558949, 40, 36, -15558949, 40, 44, -15558949, 49, 4, -15558949, 49, 12, -15558949, 49, 20, -15558949, 49, 28, -15558949, 49, 36, -15558949, 49, 44, -15558949]; var point = image.findMultiColorsCurrentScreen(firstColor, 4, null, colors); if (point != null) { clickPoint(point.x, point.y); } } main(); image.findAllMultiColors 多点找色，找到所有符合标准的点，类似于按键精灵的多点找色 @param image 要找色的图片 @param firstColor 第一个点的颜色 @param threshold 找色时颜色相似度的临界值，范围为0~255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255. @param rect 找色区域。是一个两个或四个元素的数组。(left,top)表示找色区域的左上角； right,bottom 表示找色区域的宽高。如果只有 region 只有两个元素，则找色区域为(left,top)到屏幕右下角。如果不指定 rect 选项，则找色区域为整张图片。 @param points 数组，表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color] @return 多个Point 坐标点数组或者null function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var firstColor = -15558949; var colors = [4, 4, -15558949, 4, 12, -15558949, 4, 20, -15558949, 4, 28, -15558949, 4, 36, -15558949, 4, 44, -15558949, 13, 4, -15558949, 13, 12, -15558949, 13, 20, -15558949, 13, 28, -15558949, 13, 36, -15558949, 13, 44, -15558949, 22, 4, -15558949, 22, 12, -15558949, 22, 20, -15558949, 22, 28, -15558949, 22, 36, -15558949, 22, 44, -15558949, 31, 4, -15558949, 31, 12, -15558949, 31, 20, -15558949, 31, 28, -15558949, 31, 36, -15558949, 31, 44, -15558949, 40, 4, -15558949, 40, 12, -15558949, 40, 20, -15558949, 40, 28, -15558949, 40, 36, -15558949, 40, 44, -15558949, 49, 4, -15558949, 49, 12, -15558949, 49, 20, -15558949, 49, 28, -15558949, 49, 36, -15558949, 49, 44, -15558949]; var points = image.findAllMultiColors(aimage, firstColor, 4, null, colors); if (points != null) { for (var i = 0; i image.findAllMultiColorsCurrentScreen 多点找色，找到所有符合标准的点，自动抓取当前屏幕的图片，类似于按键精灵的多点找色 @param image 要找色的图片 @param firstColor 第一个点的颜色 @param threshold 找色时颜色相似度的临界值，范围为0~255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255. @param rect 找色区域。是一个两个或四个元素的数组。(left,top)表示找色区域的左上角； right,bottom 表示找色区域的宽高。如果只有 region 只有两个元素，则找色区域为(left,top)到屏幕右下角。如果不指定 rect 选项，则找色区域为整张图片。 @param points 数组，表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color] @return 多个Point 坐标点数组或者null function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var firstColor = -15558949; var colors = [4, 4, -15558949, 4, 12, -15558949, 4, 20, -15558949, 4, 28, -15558949, 4, 36, -15558949, 4, 44, -15558949, 13, 4, -15558949, 13, 12, -15558949, 13, 20, -15558949, 13, 28, -15558949, 13, 36, -15558949, 13, 44, -15558949, 22, 4, -15558949, 22, 12, -15558949, 22, 20, -15558949, 22, 28, -15558949, 22, 36, -15558949, 22, 44, -15558949, 31, 4, -15558949, 31, 12, -15558949, 31, 20, -15558949, 31, 28, -15558949, 31, 36, -15558949, 31, 44, -15558949, 40, 4, -15558949, 40, 12, -15558949, 40, 20, -15558949, 40, 28, -15558949, 40, 36, -15558949, 40, 44, -15558949, 49, 4, -15558949, 49, 12, -15558949, 49, 20, -15558949, 49, 28, -15558949, 49, 36, -15558949, 49, 44, -15558949]; var points = image.findAllMultiColorsCurrentScreen(firstColor, 4, null, colors); if (points != null) { for (var i = 0; i image.findAllPointsForColor 在图片img指定区域中找到颜色和color完全相等的所有点，并返回集合，没有就返回null @param image 图片 @param color 要寻找的颜色 @param threshold 找色时颜色相似度的临界值，范围为0~255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255. @param rect 找色区域。是一个两个或四个元素的数组。(left,top)表示找色区域的左上角； right,bottom 表示找色区域的宽高。如果只有 region 只有两个元素，则找色区域为(left,top)到屏幕右下角。如果不指定 rect 选项，则找色区域为整张图片。 @return 多个Point 坐标点数组或者null function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var firstColor = -15558949; var rect = new Rect(); rect.left = 10; rect.right = 200; rect.top = 10; rect.bottom = 400; var points = image.findAllPointsForColor(firstColor, 4, rect); if (points != null) { for (var i = 0; i 找图 image.findImage 找图。在大图片image中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param image 大图片 @param template 小图片（模板） @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null function main() { var request = image.requestScreenCapture(); if (request){ toast(\"申请成功\"); }else { toast(\"申请失败\"); exit(); } sleep(5000); //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); //在当前屏幕中查找，并且限制只查找一个 var point = image.findImageCurrentScreen( sms, 1); logd(\"point \"+point); //抓取屏幕 var aimage = image.captureScreen(); logd(\"aimage \"+aimage); if (aimage != null) { //在图片中查找 point = image.findImage(aimage, sms, 1); logd(\"point \"+point); } } main(); image.findImageCurrentScreen 找图。在当前屏幕中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param template 小图片（模板） @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null function main() { var request = image.requestScreenCapture(); if (request){ toast(\"申请成功\"); }else { toast(\"申请失败\"); exit(); } sleep(5000); //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); //在当前屏幕中查找，并且限制只查找一个 var point = image.findImageCurrentScreen( sms, 1); logd(\"point \"+point); } main(); image.findImageThreshold 找图。在大图片image中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param image 大图片 @param template 小图片（模板） @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null function main() { var request = image.requestScreenCapture(); if (request){ toast(\"申请成功\"); }else { toast(\"申请失败\"); exit(); } sleep(5000); //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); //在当前屏幕中查找，并且限制只查找一个 var point = image.findImageThresholdCurrentScreen( sms,0.7, 1); logd(\"point \"+point); //抓取屏幕 var aimage = image.captureScreen(); logd(\"aimage \"+aimage); if (aimage != null) { //在图片中查找 point = image.findImageThreshold(aimage, sms,0.7, 1); logd(\"point \"+point); } } main(); image.findImageThresholdCurrentScreen 找图。在当前屏幕中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param template 小图片（模板） @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null function main() { var request = image.requestScreenCapture(); if (request){ toast(\"申请成功\"); }else { toast(\"申请失败\"); exit(); } sleep(5000); //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); //在当前屏幕中查找，并且限制只查找一个 var point = image.findImageThresholdCurrentScreen( sms,0.7, 1); logd(\"point \"+point); } main(); image.findImageRegion1 找图。在大图片image中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param image 大图片 @param template 小图片（模板） @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param rect 找图区域。参见findColor函数关于 rect 的说明。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null function main() { var request = image.requestScreenCapture(); if (request){ toast(\"申请成功\"); }else { toast(\"申请失败\"); exit(); } sleep(5000); //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); var rect = new Rect(); rect.left=230; rect.top=1700; rect.right=500; rect.bottom=1900; //在当前屏幕中查找，并且限制只查找一个,rect参数 可以不写 var point = image.findImageRegion1CurrentScreen( sms,0.7, rect,1); logd(\"point \"+point); //抓取屏幕 var aimage = image.captureScreen(); logd(\"aimage \"+aimage); if (aimage != null) { //在图片中查找,rect参数 可以不写 point = image.findImageRegion1(aimage, sms,0.7,rect, 1); logd(\"point \"+point); } } main(); image.findImageRegion1CurrentScreen 找图。在当前屏幕中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param template 小图片（模板） @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param rect 找图区域。参见findColor函数关于 rect 的说明。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null function main() { var request = image.requestScreenCapture(); if (request){ toast(\"申请成功\"); }else { toast(\"申请失败\"); exit(); } sleep(5000); //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); var rect = new Rect(); rect.left=230; rect.top=1700; rect.right=500; rect.bottom=1900; //在当前屏幕中查找，并且限制只查找一个,rect参数 可以不写 var point = image.findImageRegion1CurrentScreen( sms,0.7, rect,1); logd(\"point \"+point); } main(); image.findImageRegion2 找图。在大图片image中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param image 大图片 @param template 小图片（模板） @param x 找图区域 x 起始坐标 @param y 找图区域 y 起始坐标 @param w 找图区域 w 宽度 @param h 找图区域 h 高度 @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); var rect = image.findImageRegion2(aimage, sms,10,10,100,100,0.9,1); if (rect != null) { clickRandomRect(rect); toast(rect); } } } main(); image.findImageRegion2CurrentScreen 找图。在当前屏幕中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param template 小图片（模板） @param x 找图区域 x 起始坐标 @param y 找图区域 y 起始坐标 @param w 找图区域 w 宽度 @param h 找图区域 h 高度 @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); var rect = image.findImageRegion2CurrentScreen(sms,10,10,100,100,0.9,1); if (rect != null) { clickRandomRect(rect); toast(rect); } } } main(); image.findImageRegion3CurrentScreen 找图。在当前屏幕中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param template 小图片（模板） @param weakThreshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param rect 找图区域。参见findColor函数关于 rect 的说明。 @param maxLevel 默认为-1，一般而言不必修改此参数。不加此参数时该参数会根据图片大小自动调整。找图算法是采用图像金字塔进行的, level参数表示金字塔的层次, level越大可能带来越高的找图效率，但也可能造成找图失败（图片因过度缩小而无法分辨）或返回错误位置。因此，除非您清楚该参数的意义并需要进行性能调优，否则不需要用到该参数。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var rectp= new Rect(); rectp.left=10; rectp.top=100; rectp.right=100; rectp.bottom=400; //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); var rect = image.findImageRegion3CurrentScreen( sms,0.9,0.9,rectp,-1,1); if (rect != null) { clickRandomRect(rect); toast(rect); } } } main(); image.findImageRegion3 找图。在大图片image中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param image 大图片 @param template 小图片（模板） @param weakThreshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param rect 找图区域。参见findColor函数关于 rect 的说明。 @param maxLevel 默认为-1，一般而言不必修改此参数。不加此参数时该参数会根据图片大小自动调整。找图算法是采用图像金字塔进行的, level参数表示金字塔的层次, level越大可能带来越高的找图效率，但也可能造成找图失败（图片因过度缩小而无法分辨）或返回错误位置。因此，除非您清楚该参数的意义并需要进行性能调优，否则不需要用到该参数。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var temp = image.readImage(\"/sdcard/tmp.png\"); var rectp= new Rect(); rectp.left=10; rectp.top=100; rectp.right=100; rectp.bottom=400; var rect = image.findImageRegion3(aimage, temp,0.9,0.9,rectp,-1,1); if (rect != null) { clickRandomRect(rect); toast(rect); } } } main(); image.matchTemplate 模板匹配 OpenCV模板匹配封装 @param image 大图片 @param template 小图片（模板） @param weakThreshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param rect 找图区域。参见findColor函数关于 rect 的说明。 @param maxLevel 默认为-1，一般而言不必修改此参数。不加此参数时该参数会根据图片大小自动调整。找图算法是采用图像金字塔进行的, level参数表示金字塔的层次, level越大可能带来越高的找图效率，但也可能造成找图失败（图片因过度缩小而无法分辨）或返回错误位置。因此，除非您清楚该参数的意义并需要进行性能调优，否则不需要用到该参数。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Match集合 或者null function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var temp = readResAutoImage(\"tmp.png\"); var rectp= new Rect(); rectp.left=10; rectp.top=100; rectp.right=100; rectp.bottom=400; var x = image.matchTemplate(aimage, temp,0.9,0.9,rectp,-1,1); logd(x); } } main(); image.matchTemplateCurrentScreen 模板匹配 OpenCV模板匹配封装，在当前屏幕截图中进行匹配 @param template 小图片（模板） @param weakThreshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param rect 找图区域。参见findColor函数关于 rect 的说明。 @param maxLevel 默认为-1，一般而言不必修改此参数。不加此参数时该参数会根据图片大小自动调整。找图算法是采用图像金字塔进行的, level参数表示金字塔的层次, level越大可能带来越高的找图效率，但也可能造成找图失败（图片因过度缩小而无法分辨）或返回错误位置。因此，除非您清楚该参数的意义并需要进行性能调优，否则不需要用到该参数。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Match集合 或者null function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var temp = readResAutoImage(\"tmp.png\"); var rectp= new Rect(); rectp.left=10; rectp.top=100; rectp.right=100; rectp.bottom=400; var x = image.matchTemplateCurrentScreen( temp,0.9,0.9,rectp,-1,1); logd(x); } } main(); 其他 image.readImage 读取在路径path的图片文件并返回一个{@link AutoImage}对象。如果文件不存在或者文件无法解码则返回null。 @param path 图片路径 @return AutoImage 对象或者null function main() { var autoimg = image.readImage(\"/sdcard/a.png\"); } main(); image.readBitmap 读取在路径path的图片文件并返回一个{@link AutoImage}对象。如果文件不存在或者文件无法解码则返回null。 @param path 图片路径 @return android的bitmap对象或者null function main() { var autoimg = image.readBitmap(\"/sdcard/a.png\"); } main(); image.pixelInImage 返回图片image在点(x, y)处的像素的ARGB值。 该值的格式为0xAARRGGBB，是一个\"32位整数\" 坐标系以图片左上角为原点。以图片左侧边为y轴，上侧边为x轴。 @param image 图片 @param x 要获取的像素的横坐标。 @param y 要获取的像素的纵坐标。 @return 整型 function main() { var imageX = image.captureScreen(); var color = image.pixelInImage(imageX,100,100); } main(); 图片转换 image.saveTo 保存到文件中 @param img 图片对象 @param path 路径 @return bool true代表成功，false 代表失败 function main() { var imageX = image.captureScreen(); var r = image.saveTo(imageX,\"/sdard/a.png\"); toast(\"result \"+r); } main(); image.toBase64 转成base64的字符串 @param img 图片对象 @return string function main() { var imageX = image.captureScreen(); var r = image.toBase64(imageX); toast(\"result \"+r); } main(); image.clip 剪切图片 @param img 图片对象 @param x x起始坐标 @param y y起始坐标 @param w 宽度 @param h 高度 @return AutoImage 对象或者null function main() { var imageX = image.captureScreen(); var r = image.clip(imageX,100,100,300,400); toast(\"result \"+r); } main(); image.pixel 取得图片的某个点的颜色值 @param img 图片对象 @param x x坐标点 @param y y坐标点 @return int 颜色值 function main() { var imageX = image.captureScreen(); var r = image.pixel(imageX,100,100); toast(\"result \"+r); } main(); image.isRecycled 是否被回收了 @param img 图片对象 @return bool true代表已经被回收了 function main() { var imageX = image.captureScreen(); var r = image.isRecycled(imageX); toast(\"result \"+r); } main(); image.recycle 回收图片 @param img 图片对象 function main() { var imageX = image.captureScreen(); image.recycle(imageX); } main(); "},"zh-cn/funcs/device-api.html":{"url":"zh-cn/funcs/device-api.html","title":"设备函数","keywords":"","body":"说明 设备模块函数主要是跟设备信息相关联 设备模块的对象前缀是device，例如 device.getIMEI()这样调用 函数 device.getIMEI() 获取手机的IMEI @return 字符串 function main(){ var imei = device.getIMEI(); toast(imei); } main(); device.getScreenWidth() 取得屏幕宽度 @return 整型 function main(){ var width = device.getScreenWidth(); toast(width); } main(); device.getScreenHeight() 取得屏幕高度 @return 整型 function main(){ var height = device.getScreenHeight(); toast(height); } main(); device.getAndroidId() 取得Android ID @return 字符串 function main(){ var androidId = device.getAndroidId(); toast(androidId); } main(); device.getBrand() 取得手机品牌 @return 字符串 function main(){ var brand = device.getBrand(); toast(brand); } main(); device.getModel() 取得手机机型 @return 字符串 function main(){ var model = device.getModel(); toast(model); } main(); device.getImsi() 取得手机卡号 @return 字符串 function main(){ var imsi = device.getImsi(); toast(imsi); } main(); device.getSerial() 取得手机串号 @return 字符串 function main(){ var serial = device.getSerial(); toast(serial); } main(); device.getSdkInt() 取得手机SDK 版本号，例如 23 @return 字符串 function main(){ var sdkInt = device.getSdkInt(); toast(sdkInt); } main(); device.getOSVersion() 取得手机版本号,例如 6.0等字符串 @return 字符串 function main(){ var osVersion = device.getOSVersion(); toast(osVersion); } main(); device.getMacAddress() 获取mac地址 @return 字符串 function main(){ var res = device.getMacAddress(); toast(res); } main(); device.getBattery() 取得电量 @return int型 function main(){ var res = device.getBattery(); toast(res); } main(); device.getTotalMem() 取得总内存 @return long型 function main(){ var res = device.getTotalMem(); toast(res); } main(); device.getAvailMem() 取得可用内存 @return long型 function main(){ var res = device.getAvailMem(); toast(res); } main(); device.isCharging() 是否正在充电 @return 布尔型 function main(){ var res = device.isCharging(); toast(res); } main(); device.vibrate() 发出震动 单位是毫秒 function main(){ device.vibrate(1*1000); } main(); device.cancelVibration() 取消震动 function main(){ device.cancelVibration(); } main(); "},"zh-cn/funcs/file-api.html":{"url":"zh-cn/funcs/file-api.html","title":"文件函数","keywords":"","body":"说明 文件模块函数主要是跟文件信息相关联 文件模块的对象前缀是file，例如 file.readFile()这样调用 函数 file.readFile 将文件读取为字符串 @param path 文件路径 @return 字符串 function main(){ var data = file.readFile(\"/sdcard/test.txt\"); toast(data); } main(); file.writeFile 将字符串存储到文件中 @param data 字符串 数据 @param path 文件路径 function main(){ var data=\"Test\"; file.writeFile(data,\"/sdcard/test.txt\"); } main(); file.create 创建一个文件或者文件夹 @param path 文件或者文件夹路径 @return 布尔型 true 代表创建成功 function main(){ var create=file.create(\"/sdcard/test.txt\"); toast(create); } main(); file.readAssets 从APK的assets文件夹中读取数据为字符串 @param path assets文件夹中的文件路径，例如 data/a.txt @return 字符串 function main(){ var data=file.readAssets(\"data/test.txt\"); toast(data); } main(); file.deleteAllFile 删除所有文件或者文件夹 @param path 文件或者文件路径 function main(){ file.deleteAllFile(\"data/test.txt\"); } main(); file.appendLine 写入一行到文件中,追加模式 @param data 行数据 @param path 文件或者文件路径 @return 布尔型 true代表成功 false代表失败 function main(){ var data=\"sss\"; var t=file.appendLine(data,\"/sdcard/test.txt\"); toast(t); } main(); file.readLine 读取一行数据，如果行号不对，返回的是空 @param path 路径 @param lineNo 行号 @return 字符串 返回一行字符串 function main(){ var t=file.readLine(\"/sdcard/test.txt\",1); toast(t); } main(); file.readAllLines 读取所有数据 @param path 路径 @return 字符串 function main(){ var t=file.readAllLines(\"/sdcard/test.txt\"); toast(t); } main(); file.mkdirs 创建文件夹 @param path 路径 @return 布尔型 true 代表成功，false代表失败 function main(){ var t=file.mkdirs(\"/sdcard/testdir/\"); toast(t); } main(); file.exists 文件或者文件夹是否存在 @param path 路径 @return 布尔型 true 代表成功，false代表失败 function main(){ var t=file.exists(\"/sdcard/testdir/\"); toast(t); } main(); "},"zh-cn/funcs/http-api.html":{"url":"zh-cn/funcs/http-api.html","title":"网络函数","keywords":"","body":"说明 网络模块函数主要是跟网络请求信息相关联 网络模块的对象前缀是http，例如 http.downloadFile()这样调用 函数 http.request 万能请求函数 HTTP万能请求 @param param map参数，包含的参数有 url:字符串 请求的地址 timeout:整型毫秒，超时时间 method: POST ,GET,PUT 字符串，代表请求的方法 proxy: 代理地址，map参数 包含主机和端口 例如 {\"host\":\"11\",\"port\":111} followRedirects:是否自动跳转 true 或者 false requestBody: 请求的body体，如果是JSON，就是JSON字符串 userAgent:字符串 HTTP 的UA ignoreContentType:是否忽略内容类型 true 或者 false ignoreHttpErrors:是否忽略错误 true 或者 false maxBodySize : 整型，HTTP BODY最大值 referrer:字符串，请求来源 header: HTTP 请求头，map参数,例如 {\"UA\":\"test\"} cookie: HTTP 请求Cookie，map参数, 例如 {\"a\":1} data:HTTP POST的数据，map参数, 例如 {\"a\":1} file:要上传的文件，集合参数，例如 [{\"key\":\"a1\",\"fileName\":\"a.txt\",\"filePath\":\"/sdcard/\"},{\"key\":\"a1\",\"fileName\":\"a.jpg\",\"filePath\":\"/sdcard/\",\"contentType\":\"image/jpg\"}] 其中contentType可有可无 responseCharset: 字符串，强制设置响应内容的编码集 @return Response 对象或者null function main(){ http_request(); } function http_request() { //url:string //timeout:int ms //method: post ,get //proxy: {\"host\":\"11\",\"port\":111} //followRedirects:true false //requestBody: string //userAgent:string //ignoreContentType:true false //ignoreHttpErrors:true false //maxBodySize : int //referrer:string //header:{\"UA\":\"test\"} //cookie:{\"a\":1} //data:{\"a\":1} //file:[{}] //responseCharset: string var md = utils.dataMd5(\"12345\"); var md2 = utils.fileMd5(\"/sdcard/sb.png\"); var url = \"http://192.168.0.5:8081/api/request\"; var proxy = {\"host\": \"192.168.0.5\", \"port\": \"100\"}; var userAgent = \"xxx\"; var followRedirects = false; var requestBody = JSON.stringify({\"A\": 111}); var ignoreContentType = true; var ignoreHttpErrors = true; var referrer = \"xxx\"; var header = { \"Content-Type\": \" application/json; charset=UTF-8\", \"User-Agent\": \"from test\", \"ddd\": md, \"dd2\": md2, \"imei\": device.getIMEI() }; var cookie = { \"cookie1\": \"tst1\", \"cookie2\": \"tst2\" }; var data = { \"a1\": \"aaa\", \"pwd2\": md, \"md2\": md2 }; var file = [ { \"key\": \"file\", \"fileName\": \"f.png\", \"filePath\": \"/sdcard/sb.png\" }, { \"key\": \"file\", \"fileName\": \"f2.png\", \"filePath\": \"/sdcard/sde.png\", \"contentType\": \"image/png\" } ]; var params = { \"url\": url, \"method\": \"POST\", \"userAgent\": userAgent, \"referrer\": \"baidu.com\", \"cookie\": cookie, \"data\": data, \"file\": file }; var x = http.request(params); if (x) { logd(\"header=> \" + x.header); logd(\"cookie=> \" + x.cookie); logd(\"statusCode=> \" + x.statusCode); logd(\"statusMessage=> \" + x.statusMessage); logd(\"charset=> \" + x.charset); logd(\"contentType=> \" + x.contentType); logd(\"body=> \" + x.body); } else { loge(\"无结果\"); } } main(); http.downloadFile 下载远程文件到本地,支持断点续传 @param remoteUrl 远程文件URL @param file 要保存到本地的文件对象 @param timeout 下载超时，单位是毫秒 @param headers – 头标志例如{“a”:“11”} @return true 代表成功 false代表失败 function main(){ var url = \"https://imtt.dd.qq.com/16891/apk/DF4FD15AF9A9B51BA74D2710CF738EEF.apk?fsname=com.ishugui_3.9.2.3068_3923068.apk&csr=1bbd\"; var x = http.downloadFile(url, \"/sdcard/ss.apk\", 10 * 1000, {\"User-Agent\": \"test\"}); toast(\"download result-> \" + x); } main(); http.downloadFileDefault 下载远程文件到本地,支持断点续传，默认超时时间为30秒 @param remoteUrl 远程文件URL @param file 要保存到本地的文件对象 @param headers – 头标志例如{“a”:“11”} @return true 代表成功 false代表失败 function main(){ var url = \"https://imtt.dd.qq.com/16891/apk/DF4FD15AF9A9B51BA74D2710CF738EEF.apk?fsname=com.ishugui_3.9.2.3068_3923068.apk&csr=1bbd\"; var x = http.downloadFileDefault(url, \"/sdcard/ss.apk\", {\"User-Agent\": \"test\"}); toast(\"download result-> \" + x); } main(); http.httpGetDefault Http GET 请求 @param url 请求的URL @param timeout 超时时间 单位毫秒 @param headers – 头标志例如{“a”:“11”} @return 字符串 请求后返回的字符串 function main(){ var url = \"http://192.168.0.5:8081/api/httpGet?a=1\"; var x = http.httpGetDefault(url, 10 * 1000, {\"User-Agent\": \"test\"}); toast(\" result-> \" + x); loge(\"result -> \" + x); } main(); http.httpGet Http GET 请求 @param url 请求的URL @param params 参数Map表 例如 {\"a\":\"1\"} 这样的参数或者字符串 @param timeout 超时时间 单位毫秒 @param headers – 头标志例如{“a”:“11”} @return 字符串 请求后返回的字符串 function main(){ var url = \"http://192.168.0.5:8081/api/httpGet?a=1\"; var pa = {\"b\": \"22\"}; var x = http.httpGet(url, pa, 10 * 1000, {\"User-Agent\": \"test\"}); toast(\" result-> \" + x); loge(\"result -> \" + x); } main(); http.httpPost Http Post 请求 @param url 请求的URL @param params 参数，例如 {\"a\":\"1\"} 这样的参数或者字符串 @param files 要上传的文件，例如 {\"file1\":\"/sdcard/1.png\"}这样的文件参数 @param timeout 超时时间 单位毫秒 @param headers – 头标志例如{“a”:“11”} @return 字符串 请求后返回的字符串 function main(){ //不带文件的请求 var url = \"http://192.168.0.5:8081/api/httpPost\"; var pa = {\"b\": \"我是b的值\"}; var x = http.httpPost(url, pa, null, 10 * 1000, {\"User-Agent\": \"test\"}); toast(\" result-> \" + x); loge(\"result -> \" + x); } main(); function main(){ //带上传文件的请求 var url = \"http://192.168.0.5:8081/api/httpPost\"; var pa = {\"b\": \"我是b的值\"}; var files = {\"file1\": \"/sdcard/p.json\", \"file2\": \"/sdcard/z.xml\"}; var x = http.httpPost(url, pa, files, 10 * 1000, {\"User-Agent\": \"test\"}); toast(\" result-> \" + x); loge(\"result -> \" + x); } main(); http.postJSON HTTP POST JSON数据 @param url 请求的URL @param json json数据 @param timeout – 超时时间 单位毫秒 @param headers – 头标志例如{“a”:“11”} @return 字符串 请求后返回的字符串 function main(){ var url = \"http://192.168.0.5:8081/api/postJSON\"; var pa = {\"b\": \"我是b的值\"}; var x = http.postJSON(url, pa, 10 * 1000, {\"User-Agent\": \"test\"}); toast(\" result-> \" + x); loge(\"result -> \" + x); } main(); "},"zh-cn/funcs/thread-api.html":{"url":"zh-cn/funcs/thread-api.html","title":"线程函数","keywords":"","body":"说明 线程模块函数主要是跟线程信息相关联 线程模块的对象前缀是thread，例如 thread.execFuncSync()这样调用 函数 setTimeout 设定延迟多少毫秒后执行函数，在子线程中执行 @param func 要执行的函数 @param timeout 延迟时间，单位是毫秒 线程对象 该对象可以进行取消 function main(){ var t=setTimeout(function() { toast(\"我是一秒后执行的代码\"); },1000); } main(); cancelTimeout 取消延迟执行 @param t 要取消的函数 function main(){ var t=setTimeout(function() { toast(\"我是一秒后执行的代码\"); },1000); //取消就不会执行了 cancelTimeout(t); } main(); setInterval 设置多少周期进行执行一次，在子线程中执行 @param func 函数 @param interval 周期时间，单位是毫秒 @return 线程对象 该对象可以进行取消 function main(){ var t=setInterval(function() { toast(\"我是每隔一秒执行的代码\"); },1000); } main(); cancelInterval 取消周期执行的函数 @param t 要取消的函数 function main(){ var t=setInterval(function() { toast(\"我是每隔一秒执行的代码\"); },1000); cancelInterval(t); } main(); execSync 执行某个函数并且等待true返回，如果函数中返回的是true，该方法将立刻执行完毕 @param condition 条件函数 @param timeout 超时时间，单位是毫秒 @return 布尔型 返回一个布尔型值 function main(){ execSync(function() { logd(\"我是同步执行的代码\"); },1000); } main(); thread.execAsync 异步执行线程，这里会将Runnable放到线程池中进行管理 @param runnable Runnable对象 function main(){ thread.execAsync(function() { logd(\"我是异步执行的代码\"); }); } main(); thread.execSync 执行某个函数并且等待true返回，如果函数中返回的是true，该方法将立刻执行完毕 @param condition 条件函数 @param timeout 超时时间，单位是毫秒 @return 布尔型 返回一个布尔型值 function main(){ thread.execSync(function() { logd(\"我是同步执行的代码\"); },1000); } main(); "},"zh-cn/funcs/utils-api.html":{"url":"zh-cn/funcs/utils-api.html","title":"常用工具函数","keywords":"","body":"说明 工具类模块函数主要是跟Android常用的信息相关联 工具类模块的对象前缀是utils，例如 utils.requestShowLogPermission()这样调用 函数 打开App相关 utils.openApp 打开APP @param packageName 程序的包名 @return 布尔型 true 代表成功，false 代表失败 function main(){ //打开微信 utils.openApp(\"com.tencent.mm\"); } main(); utils.openAppByName 打开APP，通过应用名称 @param appName 程序名称，比如今日头条 @return 布尔型 true 代表成功，false 代表失败 function main(){ //打开微信 utils.openAppByName(\"微信\"); } main(); utils.openActivity 打开一个activity，通过map参数 @param map 例如{\"action\":\"\"},key的固定只有 action, uri,pkg,className,flag,其他的都是参数了 @return 布尔型 true 代表成功，false 代表失败 function main(){ //打开抖音直播 var map={ \"uri\":\"snssdk1128://aweme/live/6701887916223941379\", }; utils.openActivity(map); } main(); 图库相关 utils.insertImageToAlbum 将图片插入到相册中，此方法会立刻更新相册数据 @param path 图片路径 function main(){ utils.insertImageToAlbum(\"/sdcard/a.png\"); } main(); utils.insertVideoToAlbum 将视频插入到相册中，此方法会立刻更新相册数据 @param path 视频路径 function main(){ utils.insertVideoToAlbum(\"/sdcard/a.mp4\"); } main(); 其他 utils.readConfigInt 读取JSON中的整型数据 @param jsonObject JSON对象 @param key 配置项目 @return 整型，找不到就返回0 function main(){ var testData = utils.readConfigInt(jsonObject,\"test_key\"); } main(); utils.readJSONString 读取JSON中的字符串数据 @param jsonObject JSON对象 @param key 配置项目 @return 字符串 找不到就返回空字符串 function main(){ var testData = utils.readConfigString(jsonObject,\"test_key\"); } main(); utils.isObjectNull 判断一个对象为空 @param o 对象 @return true或者false function main(){ var isNull = utils.isObjectNull(\"test_key\"); } main(); utils.isObjectNotNull 判断一个对象不为空 @param o 对象 @return true或者false function main(){ var isNull = utils.isObjectNotNull(\"test_key\"); } main(); utils.getRatio 取得比例，例如10参数，就是返回10%的比例，如果是true，说明随机比例正确，否则不正确 @param ratio 浮点型 1-100 @return true或者false function main(){ var ratio = utils.getRatio(20f); toast(ratio); } main(); utils.getRangeInt 取得某个范围的随机值 @param min 最小值 @param max 最大值 @return 在min和max中间的值,包含最大和最小值 function main(){ var value = utils.getRangeInt(1,100); toast(value); } main(); utils.isTrue 判断布尔型对象是否为真 @param r 布尔型对象 @return true 或者 false function main(){ var value = utils.isTrue(true); } main(); utils.fileMd5 文件的MD5 @param file 文件路径 @return 文件MD5字符串或者null function main(){ var md5 = utils.fileMd5(\"/sdcard/a.txt\"); } main(); utils.dataMd5 数据计算出来的MD5 @param data 数据 @return 数据MD5字符串或者null function main(){ var md5 = utils.dataMd5(\"data\"); } main(); utils.randomInt 随机整型数据 @param length 位数，要随机产生多少位的整型数据 @return 整型 function main(){ var r = utils.randomInt(2); } main(); utils.randomCharNumber 取得随机的数字和字母 @param length 长度 @return 字符串数字混合 function main(){ var r = utils.randomCharNumber(2); } main(); utils.getApkPkgName 取得App文件的包名 @param filePath 文件路径 @return 字符串 function main(){ var pkgName = utils.getApkPkgName(\"/sdcard/app.apk\"); } main(); utils.isAppExist App是否已经安装 @param packageName 应用程序的包名 @return true 代表已经安装，false代表未安装 function main(){ var result = utils.isAppExist(\"com.ss.android.article.news\"); } main(); utils.getAppVersionCode 取得已安装的程序的版本整型标示 @param packageName 应用程序的包名 @return 整型 function main(){ var versionCode = utils.getAppVersionCode(\"com.ss.android.article.news\"); } main(); utils.getAppVersionName 取得已安装的程序的版本字符串标示 @param packageName 应用程序的包名 @return 字符串 例如 1.0.0 function main(){ var r = utils.getAppVersionName(\"com.ss.android.article.news\"); } main(); utils.setClipboardText 设置剪贴板文本 @param text 文本 @return boolean function main(){ var r = utils.setClipboardText(\"com.ss.android.article.news\"); toast(\"设置结果:\"+r); } main(); utils.getClipboardText 读取剪贴板文本 @return string function main(){ var r = utils.getClipboardText(); toast(\"读取结果:\"+r); } main(); "},"zh-cn/funcs/shell-api.html":{"url":"zh-cn/funcs/shell-api.html","title":"Shell命令函数","keywords":"","body":"说明 代理模式下才能使用该函数，用户执行shell命令 shell模块的对象前缀是shell，例如 shell.installApp()这样调用 shell.installApp 安装 apk @param path 文件路径 @return true 代表安装成功，false 代表安装失败 function main(){ var result = shell.installApp(\"/sdcard/app.apk\"); } main(); shell.uninstallApp 卸载应用程序 @param packageName 应用程序的包名 @return true 代表卸载成功，false 代表卸载失败 function main(){ var result = shell.uninstallApp(\"com.ss.android.article.news\"); } main(); shell.stopApp 停止正在执行的应用 @param packageName 应用程序的包名 @return true 代表成功，false 代表失败 function main(){ var result = shell.stopApp(\"com.ss.android.article.news\"); } main(); shell.execCommand 执行Shell命令 @param command 命令，例如安装App ： pm install /sdcard/app.apk @return 命令执行后返回的字符串结果 function main(){ var result = shell.execCommand(\"pm install /sdcard/app.apk\"); } main(); "},"zh-cn/funcs/sqlite-api.html":{"url":"zh-cn/funcs/sqlite-api.html","title":"Sqlite命令函数","keywords":"","body":"说明 sqlite模块函数主要是用于操作sqlite数据库 sqlite模块的对象前缀是sqlite，例如 sqlite.close()这样调用 sqlite 教程：https://www.runoob.com/sqlite/sqlite-tutorial.html 函数 sqlite.connectOrCreateDb 连接数据库 创建或者链接一个数据库 @param dbName 数据库名称 @return boolean true 代表请求权限成功，false代表失败 function main(){ var create = sqlite.connectOrCreateDb(\"test.db\"); logd(\"create db result：\"+create); } main(); sqlite.createTable 创建表 创建数据表 @param tableName 表名称 @param columns 列名称，例如 [\"name\",\"pwd\"] @return boolean true 代表请求权限成功，false代表失败 function main(){ var tableName=\"tbl_user\"; var columns=[\"name\",\"pwd\"]; var createTable = sqlite.createTable(tableName,columns); logd(\"createTable result：\"+createTable); } main(); sqlite.insert 插入数据 插入数据 @param tableName 表名 @param map 数据的map表 @return boolean true 代表请求权限成功，false代表失败 function main(){ var tableName=\"tbl_user\"; var map={ \"name\":\"我是名称\", \"pwd\":\"我是密码\" }; var insert = sqlite.insert(tableName,map); logd(\"insert result：\"+insert); } main(); sqlite.update 更新数据 更新数据 @param tablename 表名称 @param map 数据的map表 @param where 条件语句 @return boolean true 代表请求权限成功，false代表失败 function main(){ var tableName=\"tbl_user\"; var map={ \"name\":\"我是名称22\" }; var where=\"id>3\"; var update = sqlite.update(tableName,map,where); logd(\"update result：\"+update); } main(); sqlite.query 查询数据 查询数据 @param sql sql语句 @return JSON | 数据集合对象 function main(){ var tableName=\"tbl_user\"; var sql=\"select * from \"+tableName; var data = sqlite.query(sql); logd(\"data result：\"+JSON.stringify(data)); } main(); sqlite.delete 删除数据 删除数据 @param sql sql语句 @return boolean true 代表请求权限成功，false代表失败 function main(){ var tableName=\"tbl_user\"; var sql=\"delete from \"+tableName+\" where id>3;\"; var result = sqlite.delete(sql); logd(\"delete result：\"+ result); } main(); sqlite.execSql 执行sql 查询数据 @param sql sql语句 @return boolean true 代表请求权限成功，false代表失败 function main(){ var tableName=\"tbl_user\"; var sql=\"delete from \"+tableName+\" where id>3;\"; var result = sqlite.execSql(sql); logd(\"execSql result：\"+ result); } main(); sqlite.dropDatabase 删除数据库 删除数据库 @return boolean true 代表请求权限成功，false代表失败 function main(){ var result = sqlite.dropDatabase(); logd(\"dropDatabase result：\"+ result); } main(); sqlite.dropTable 删除表 删除表 @param table 表名 @return boolean true 代表请求权限成功，false代表失败 function main(){ var tableName=\"tbl_user\"; var result = sqlite.dropTable(tableName); logd(\"dropTable result：\"+ result); } main(); sqlite.close 关闭数据库链接，释放资源 关闭数据库链接，释放资源 @return boolean true 代表请求权限成功，false代表失败 function main(){ var result = sqlite.close(); logd(\"close result：\"+ result); } main(); "},"zh-cn/funcs/ui-custom.html":{"url":"zh-cn/funcs/ui-custom.html","title":"原生UI定制","keywords":"","body":"说明 EasyClick 遵循了Android的UI设计方式，相当于Android UI的简化版本 多tab标签支持 如果需要多tab支持，只要在工程的layout工程下新建一个tab.ini文件即可 内容是 tab名称=布局文件名称，例如 参数配置=main.xml 注册使用=reg.xml 使用说明=intr.xml 支持以下视图 LinearLayout 线性布局 FrameLayout 帧布局 RelativeLayout 绝对布局 ScrollView 滚动框 View视图 Button 按钮 TextView 文本视图 EditText 输入框 CheckBox 复选框 RadioGroup布局 RadioButton 单选框 Spinner 下拉选择框 WebView内嵌浏览器 公有属性 属性名 说明 可选值 layout_width 宽度 wrap_content: 和自身内容一样的长度 match_parent:和父组件一样的长度具体数字+dp layout_height 高度 wrap_content: 和自身内容一样的长度 match_parent:和父组件一样的长度具体数字+dp background 背景色 16进制的背景色，例如#FFFFFF或者#FFFFFFFF tag 标签 中英文都可，在代码中可以通过tag获取对应的值 visibility 是否可展示 gone:不展示visible:展示invisible:不展示但是占用空间 clickable 是否可点击 true: 可点击 false: 不可点击 enable 是否启用 true: 启用 false: 禁用 minHeight 最小高度 具体数字+dp minWidth 最小宽度 具体数字+dp paddingLeft 左内边距 具体数字+dp paddingTop 上内边距 具体数字+dp paddingRight 右内边距 具体数字+dp paddingBottom 下内边距 具体数字+dp padding 上下左右内边距 具体数字+dp layout_gravity 自身相当于父容器的对齐方式 用法参考topbottomleftrightcenter_verticalfill_verticalcenter_horizontalfill_horizontalcenterfillclip_verticalclip_horizontal layout_margin 上下左右外边距 具体数字+dp layout_marginLeft 左外边距 具体数字+dp layout_marginRight 右外边距 具体数字+dp layout_marginTop 上外边距 具体数字+dp layout_marginBottom 下外边距 具体数字+dp UI高度和宽度解释 属性为：layout_width, layout_height match_parent 填充满父容器 wrap_content 以自身实际宽度为准 数字型，例如：12dp，代表12个dp宽度，dp是android的宽度单位 UI界面参数读取 参考 全局模块UI参数读取 "},"zh-cn/funcs/ui/linearlayout.html":{"url":"zh-cn/funcs/ui/linearlayout.html","title":"LinearLayout线性布局","keywords":"","body":"说明 LinearLayout，中文意思就是线性布局， 在实际开发中比较常用的布局，它主要以水平和垂直的方式来显示界面中的控件。 在线性布局中，线性布局管理器允许为每一个子视图指定一个weight属性，以控制每一个子视图在空间内的大小。 而线性布局中的orientation属性则是用于控制控件的排列方向。 android:orientation=\"vertical\"属性将其指定为垂直线性排列； android:orientation=\"horizontal\"属性将其指定为水平线性排列； 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 orientation 方向 vertical:垂直 horizontal:水平 "},"zh-cn/funcs/ui/framelayout.html":{"url":"zh-cn/funcs/ui/framelayout.html","title":"FrameLayout帧布局","keywords":"","body":"说明 FrameLayout，帧布局是最为简单的一种布局，该布局为每个加入其中的控件创建一个空白区域，称为一帧，每个控件占据一帧。采用帧布局时，所有控件都默认显示在屏幕左上角，并按照先后放入的顺序重叠摆放，先放入的将会在最底层，后放入的控件显示在最顶层。帧布局使用于图层设计。 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 "},"zh-cn/funcs/ui/relativelayout.html":{"url":"zh-cn/funcs/ui/relativelayout.html","title":"RelativeLayout绝对布局","keywords":"","body":"说明 相对布局是通过相对定位的方式制定控件位置，即以其他的控件或父容器为参照物，摆放控件位置。在设计相对布局时要遵循控件之间的依赖关系，后放入的控件的位置要依赖于先放入的控件。 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 gravity 内部的控件对齐方式 用法参考topbottomleftrightcenter_verticalfill_verticalcenter_horizontalfill_horizontalcenterfillclip_verticalclip_horizontal "},"zh-cn/funcs/ui/scrollview.html":{"url":"zh-cn/funcs/ui/scrollview.html","title":"ScrollView滚动框","keywords":"","body":"说明 可以滚动的布局控件，子元素只能有一个 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 fillViewport 填充所有视图 true: 是 false:否 "},"zh-cn/funcs/ui/view.html":{"url":"zh-cn/funcs/ui/view.html","title":"View视图","keywords":"","body":"说明 View，最基础的视图 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 无 "},"zh-cn/funcs/ui/button.html":{"url":"zh-cn/funcs/ui/button.html","title":"Button按钮","keywords":"","body":"说明 按钮 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 gravity 内部的控件对齐方式 用法参考topbottomleftrightcenter_verticalfill_verticalcenter_horizontalfill_horizontalcenterfillclip_verticalclip_horizontal text 按钮文字 字符串 textColor 文字颜色 16进制，例如#FFFFFF textSize 文字大小 具体数字+dp maxLength 文字最大长度 具体数字 "},"zh-cn/funcs/ui/textview.html":{"url":"zh-cn/funcs/ui/textview.html","title":"TextView文本","keywords":"","body":"说明 文本 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 gravity 内部的控件对齐方式 用法参考topbottomleftrightcenter_verticalfill_verticalcenter_horizontalfill_horizontalcenterfillclip_verticalclip_horizontal text 按钮文字 字符串 textColor 文字颜色 16进制，例如#FFFFFF textSize 文字大小 具体数字+dp maxLength 文字最大长度 具体数字 lines 行数 具体数字 maxLines 最大 具体数字 ellipsize 文字长度超过宽度时的显示方式 start:省略号显示在开头end:省略号显示在结尾middle:省略号显示在中间marquee:以横向滚动方式显示(需获得当前焦点时)none:不显示 "},"zh-cn/funcs/ui/edittext.html":{"url":"zh-cn/funcs/ui/edittext.html","title":"EditText输入框","keywords":"","body":"说明 文本输入框 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 gravity 内部的控件对齐方式 用法参考topbottomleftrightcenter_verticalfill_verticalcenter_horizontalfill_horizontalcenterfillclip_verticalclip_horizontal hit 输入提示 字符串 text 文字 字符串 textColor 文字颜色 16进制，例如#FFFFFF textSize 文字大小 具体数字+dp maxLength 文字最大长度 具体数字 lines 行数 具体数字 maxLines 最大 具体数字 ellipsize 文字长度超过宽度时的显示方式 start:省略号显示在开头end:省略号显示在结尾middle:省略号显示在中间marquee:以横向滚动方式显示(需获得当前焦点时)none:不显示 "},"zh-cn/funcs/ui/checkbox.html":{"url":"zh-cn/funcs/ui/checkbox.html","title":"CheckBox复选框","keywords":"","body":"说明 复选框 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 gravity 内部的控件对齐方式 用法参考topbottomleftrightcenter_verticalfill_verticalcenter_horizontalfill_horizontalcenterfillclip_verticalclip_horizontal checked 是否选择 true:选中 false:不选中 text 文字 字符串 textColor 文字颜色 16进制，例如#FFFFFF textSize 文字大小 具体数字+dp "},"zh-cn/funcs/ui/radiogroup.html":{"url":"zh-cn/funcs/ui/radiogroup.html","title":"RadioGroup布局","keywords":"","body":"说明 RadioGroup用于包裹RadioButton实现只选中一个的效果，继承LinearLayout，包含线性布局的属性 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 orientation 方向 vertical:垂直 horizontal:水平 "},"zh-cn/funcs/ui/radiobutton.html":{"url":"zh-cn/funcs/ui/radiobutton.html","title":"RadioButton单选框","keywords":"","body":"说明 单选框 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 gravity 内部的控件对齐方式 用法参考topbottomleftrightcenter_verticalfill_verticalcenter_horizontalfill_horizontalcenterfillclip_verticalclip_horizontal checked 是否选择 true:选中 false:不选中 text 文字 字符串 textColor 文字颜色 16进制，例如#FFFFFF textSize 文字大小 具体数字+dp "},"zh-cn/funcs/ui/spinner.html":{"url":"zh-cn/funcs/ui/spinner.html","title":"Spinner下拉选择框","keywords":"","body":"说明 下拉选框 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 gravity 内部的控件对齐方式 用法参考topbottomleftrightcenter_verticalfill_verticalcenter_horizontalfill_horizontalcenterfillclip_verticalclip_horizontal text 下拉文字 字符串多个下拉选项用竖线分隔，例如：选项1|选型2 textColor 文字颜色 16进制，例如#FFFFFF textSize 文字大小 具体数字+dp "},"zh-cn/funcs/ui/webview.html":{"url":"zh-cn/funcs/ui/webview.html","title":"WebView内嵌浏览器","keywords":"","body":"说明 WebView内嵌浏览器，支持H5和JS操作 使用示例 第一种 加载layout文件夹中的html 第二种网络上的html 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 url 网页地址 支持layout内部的html，也支持http网络上的html "},"zh-cn/funcs/html-ui-custom.html":{"url":"zh-cn/funcs/html-ui-custom.html","title":"H5 UI定制","keywords":"","body":"说明 EasyClick 使用WebView支撑HTML的UI方式，并且扩展了JS方法，用于控制EC程序。 新建工程时候可以对应的模板，推荐使用Materialize模板，文档网址 http://www.materializecss.cn 也可以自己编写精美的HTML页面，更多JS方法的使用请参考模板中的用法 多tab标签支持 如果需要多tab支持，只要在工程的layout工程下新建一个tab.ini文件即可 内容是 tab名称=布局文件名称，例如 参数配置=main.html 注册使用=reg.html 使用说明=intr.html 浏览器扩展方法 浏览器扩展的方法，主要用于网页和EC程序进行交互，并且这些方法只能在网页中调用才行 启动脚本 window.ec.start() 停止脚本 window.ec.stopTask() 隐藏开始按钮 window.ec.hideStartBtn() 显示开始按钮 window.ec.displayStartBtn() 获取所有配置的JSON字符串 var s= window.ec.getConfigJSON(); alert(s); 获取单个配置的字符串 var s= window.ec.getConfig(\"name\"); alert(s); 保存单个配置 var s= window.ec.save(\"name\",\"123\"); alert(s); window.ec.saveConfig(\"name\", name); 打开EC的系统设置 window.ec.openECSystemSetting() 显示Toast消息 window.ec.toast(\"我是toast消息\") ; 显示日志消息窗口 window.ec.showLogWindow(); 关闭日志消息窗口 window.ec.closeLogWindow(); 显示日志消息 window.ec.logd(\"我是日志\"); 服务状态控制 是否是无障碍服务模式 var s = window.ec.isAccMode(); alert(s); 是否是代理服务模式 var s = window.ec.isAgentMode(); alert(s); 无障碍服务是否已经启动 var s = window.ec.isAccServiceOk(); alert(s); 代理服务是否已经启动 var s = window.ec.isAgentServiceOk(); alert(s); 启动服务环境 var s = window.ec.startEnv(); alert(s); 悬浮窗控制 是否有悬浮窗权限 var s = window.ec.hasFloatViewPermission(); alert(s); 请求悬浮窗权限 //参数是超时时间，单位是秒 var s = window.ec.requestFloatViewPermission(10); alert(s); 展示浮窗 var m = { \"path\": \"main.html\", \"tag\": \"tag\", \"titleBg\": \"#888888\", \"x\": 10, \"y\": 10, \"w\": 100, \"h\": 200 }; var xd =window.ec.showFloatView(JSON.stringify(m)); alert(xd); 关闭浮窗 var m = { \"path\": \"main.html\", \"tag\": \"tag\", \"titleBg\": \"#888888\", \"x\": 10, \"y\": 10, \"w\": 100, \"h\": 200 }; var xd =window.ec.showFloatView(JSON.stringify(m)); setTimeout(function() { window.ec.closeFloatView(\"tag\"); },3000); alert(xd); 关闭所有浮窗，不包含日志悬浮窗 var m = { \"path\": \"main.html\", \"tag\": \"tag\", \"titleBg\": \"#888888\", \"x\": 10, \"y\": 10, \"w\": 100, \"h\": 200 }; var xd =window.ec.showFloatView(JSON.stringify(m)); setTimeout(function() { window.ec.closeAllFloatView(); },3000); alert(xd); 开启一个定时任务 开启一个定时脚本任务 @param tag 任务的唯一标示，不能为空，脚本中可以使用readConfigString(\"jobTaskTag\")获取当前tag值，判断是那个任务过来执行的 @param execTime 定时时间格式: 2020-04-17 19:20:00，或者直接是秒数字，例如 3，代表3秒后 @param cancelBeforeRunning @return 整型 jobid var time=\"2020-04-17 09:00:00\"; var id =window.ec.startJob(\"task1\",time,true); alert(\"job id \"+id); 定时任务 获取所有定时任务TAG var t =window.ec.getAllJobTag(); alert(\"job tags \"+t); 取消所有定时任务 var t =window.ec.cancelAllJob(); alert(\"job cancel \"+t); 取消指定TAG定时任务 //参数task1 是创建定时任务的tag值 var t =window.ec.cancelJob(\"task1\"); alert(\"job cancel \"+t); "},"zh-cn/hot-update.html":{"url":"zh-cn/hot-update.html","title":"热更新功能","keywords":"","body":"什么是热更新 热更新一般用于不用安装程序即可将关键的代码进行更新 EC的热更新主要用于更新打包后的自动化测试脚本 EC如何热更新 打开工程下面的update.json，内容如下: { \"update_url\": \"http://xxx.com/update\", \"version\": \"1.0.0\" } 参数解析 update_url: 代表服务端的更新接口，需要自己编写服务端接口 version: 代表当前脚本的版本号 EC 加载新包 客户端请求 以上配置好后，打包运行，程序会自动使用GET方式请求 update_url对应的地址并且会带上参数； 例如 ：http://xxx.com/update?version=1.0.0 请自行在服务端做版本比较 服务端返回 服务端返回格式如下： { \"download_url\": \"http://xxx.com/aaa.iec\", \"version\": \"1.1.0\" } download_url： 代表新包的下载地址 version：代表新包的版本号 返回这样的格式的JSON后，EC会下载最新的IEC包并加载使用。 "},"zh-cn/zk/zk.html":{"url":"zh-cn/zk/zk.html","title":"企业版中控接口","keywords":"","body":"什么是中控 中控平台是一个统一管理和控制设备的平台 中控对接 已有的中控平台如何对接到EC程序中? EC开放的接口均使用HTTP POST方式即可请求到，参数一律使用JSON，如果你不太理解POST JSON，请看这个文章： https://www.cnblogs.com/bookyao/p/12134438.html 以及java如何进行POST JSON: https://blog.csdn.net/qq_26975307/article/details/82713725 EC在手机端远程地址是什么 EC在手机端的端口是 20390 USB连接设备模式 如果是USB直接连接设备的，请使用adb forward命令将EC端口转发到电脑端口，教程：https://www.jianshu.com/p/63c4d5c31909 例如将设备的20391转发到电脑的20391端口上： adb -s 手机的序列号1 forward tcp:20391 tcp:20390 转发端口到电脑后，可以在浏览器中打开 http://127.0.0.1:20391 就可以看到OK几个字样，代表成功转发 如果有多台设备，可以将本地端口依次递增 adb -s 手机的序列号1 forward tcp:20391 tcp:20390 adb -s 手机的序列号2 forward tcp:20392 tcp:20390 adb -s 手机的序列号3 forward tcp:20393 tcp:20390 如何获取手机序列号教程 https://www.cnblogs.com/yjlch1016/p/8512592.html WIFI连接模式 如果中控和设备在同一局域网，可以直接找到手机IP，直接请求手机到20390端口 按键精灵调用 如果你使用按键精灵或者其他手机软件调用EC，可以直接在手机上请求 http://127.0.0.1:20390 如果是按键精灵调用EC，请使用开发工具打企业版本的APK包 接口返回 接口返回示例： { \"code\":1, \"msg\":\"\", \"data\":true } code： 代表服务接口是否正常，1 代表正常服务，0 代表失败，如果为0的情况下，请查看msg的消息 msg：接口返回的错误消息 data：实际执行函数的返回值，可能是字符串，布尔型，护着数据JSON数据，这个请根据实际接口返回进行处理 中控接口 全局节点模块接口 日志接口 节点服务接口 点击动作接口 多点触摸动作接口 滑动动作接口 拖动动作接口 输入动作接口 节点操作接口 系统按键接口 通知栏接口 悬浮窗接口 代理事件模块接口 - 开发中 图色模块接口 - 开发中 设备模块接口 - 开发中 文件模块接口 - 开发中 网络模块接口 - 开发中 常用工具模块接口 - 开发中 Shell命令模块接口 - 开发中 Sqlite模块接口 - 开发中 "},"zh-cn/zk/zk-node.html":{"url":"zh-cn/zk/zk-node.html","title":"全局节点模块接口","keywords":"","body":"说明 全局节点接口包含了所有节点操作，对应的是 全局模块和全局快捷事件 请求地址接口为 /global 所有的JSON参数中的type字段，都是要调用的方法名称，请看实例 以下例子均为USB连接的情况下，设备接口转到本机的 20391端口为例，请求地址为 http://127.0.0.1:20391/global 以下的例子均是使用nodejs做post json请求，如果你使用其他语言，可以自行更改 "},"zh-cn/zk/global/zk-global-log.html":{"url":"zh-cn/zk/global/zk-global-log.html","title":"日志接口","keywords":"","body":"日志函数 toast 浮层消息 浮层消息 @param msg 消息字符串 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"toast\", \"msg\":\"我是消息\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } logd 调试消息 调试消息 @param msg 消息字符串 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"logd\", \"msg\":\"我是消息\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } logi 信息消息 信息消息 @param msg 消息字符串 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"logi\", \"msg\":\"我是消息\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } logw 警告消息 警告消息 @param msg 消息字符串 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"logw\", \"msg\":\"我是消息\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } loge 错误消息 错误消息 @param msg 消息字符串 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"loge\", \"msg\":\"我是消息\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } setSaveLog 保存日志 设置保存日志到手机操作 @param save true 代表保存，false代表不保存 @return 字符串，保存日志的文件夹地址 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"setSaveLog\", \"save\":true }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } "},"zh-cn/zk/global/zk-node-service.html":{"url":"zh-cn/zk/global/zk-node-service.html","title":"节点服务接口","keywords":"","body":"节点服务相关 exit 退出脚本 退出脚本 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"exit\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } openECSystemSetting 打开EC设置 打开EC设置 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"openECSystemSetting\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } isAccMode 是否无障碍模式 是否无障碍模式 @return 布尔型，true代表是，false代表否 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"isAccMode\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } isAccServiceOk 无障碍服务是否正常 无障碍服务是否正常 @return 布尔型，true代表是，false代表否 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"isAccServiceOk\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } isAgentMode 是否代理模式 是否代理模式 @return 布尔型，true代表是，false代表否 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"isAgentMode\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } isAgentServiceOk 代理服务是否正常 代理服务是否正常 @return 布尔型，true代表是，false代表否 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"isAgentServiceOk\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } isServiceOk 节点服务是否正常 节点服务是否正常，不区分运行模式 @return 布尔型，true代表是，false代表否 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"isServiceOk\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } startEnv 启动环境 启动环境，最好先激活手机，这样会自动启动环境，且免root @return 布尔型，true代表是，false代表否 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"startEnv\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } setECSystemSetting 设置EC系统参数 设置EC系统参数 @param settings JSON内部属性解释: running_mode：运行模式，值为 无障碍 或者 代理 auto_start_service: 是否自启动服务，值为 是或者否 daemon_service: 是否守护服务，值为 是或者否 volume_start_tc: 是否音量键启动脚本，值为 是或者否 log_float_window: 是否展示日志悬浮窗，值为 是或者否 @return 布尔型，true代表是，false代表否 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"setECSystemSetting\", \"settings\":{ \"running_mode\":\"无障碍\", \"log_float_window\":\"是\" } }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } "},"zh-cn/zk/global/zk-global-click.html":{"url":"zh-cn/zk/global/zk-global-click.html","title":"点击动作接口","keywords":"","body":"点击动作接口 clickPoint 点击坐标 点击坐标 @param x x坐标 @param y y坐标 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"clickPoint\", \"x\":10, \"y\":10 }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } longClickPoint 长点击坐标 长点击坐标 @param x x坐标 @param y y坐标 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"longClickPoint\", \"x\":10, \"y\":10 }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } click 选择器点击 选择器点击 @param selectors 选择器数组，更多选择器属性，请查看选择器与节点属性 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"click\", \"selectors\": [{ \"text\": \"设置\" }] }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } longClick 长选择器点击 长选择器点击 @param selectors 选择器数组，更多选择器属性，请查看选择器与节点属性 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"longClick\", \"selectors\": [{ \"text\": \"设置\" }] }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } "},"zh-cn/zk/global/zk-global-multitouch.html":{"url":"zh-cn/zk/global/zk-global-multitouch.html","title":"多点触摸动作接口","keywords":"","body":"多点触摸动作接口 multiTouch 多点触摸 多点触摸，用法和全局快捷事件-多点触摸相同 @param arrays 多点触摸的数组，请看实例 @param timeout 超时时间，单位毫秒 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var touch1 = [ {\"action\": 0, \"x\": 500, \"y\": 1200, \"pointer\": 1, \"delay\": 1}, {\"action\": 2, \"x\": 500, \"y\": 1100, \"pointer\": 1, \"delay\": 20}, {\"action\": 2, \"x\": 500, \"y\": 1000, \"pointer\": 1, \"delay\": 20}, {\"action\": 1, \"x\": 1, \"y\": 1, \"pointer\": 1, \"delay\": 20} ]; var touch2 = [ {\"action\": 0, \"x\": 800, \"y\": 1200, \"pointer\": 2, \"delay\": 1}, {\"action\": 2, \"x\": 800, \"y\": 1100, \"pointer\": 2, \"delay\": 20}, {\"action\": 2, \"x\": 800, \"y\": 1000, \"pointer\": 2, \"delay\": 20}, {\"action\": 1, \"x\": 800, \"y\": 1, \"pointer\": 2, \"delay\": 20} ]; var p = { \"type\": \"multiTouch\", \"arrays\": [touch1,touch2], \"timeout\":1000 }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } "},"zh-cn/zk/global/zk-global-swipe.html":{"url":"zh-cn/zk/global/zk-global-swipe.html","title":"滑动动作接口","keywords":"","body":"滑动动作接口 swipe 滑动节点 滑动节点 @param selectors 选择器数组，更多选择器属性，请查看选择器与节点属性 @param endX 目标X坐标 @param endY 目标Y坐标 @param duration 动作持续时长，单位毫秒 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"swipe\", \"selectors\": [{ \"text\": \"设置\" }], \"endX\":100, \"endY\":100, \"duration\":1500 }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } swipeToPoint 滑动坐标到目标坐标 滑动坐标到目标坐标 @param startX 起始X坐标 @param startY 起始Y坐标 @param endX 目标X坐标 @param endY 目标Y坐标 @param duration 动作持续时长，单位毫秒 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"swipeToPoint\", \"startX\": 1000, \"startY\": 1000, \"endX\":100, \"endY\":100, \"duration\":1500 }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } isScrollEnd 是否滚动到底部了 是否滚动到底部了，如果查不到元素也会返回false @param selectors 选择器数组，更多选择器属性，请查看选择器与节点属性 @param direction 滚动方向 UP,DOWN,LEFT,RIGHT @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"isScrollEnd\", \"selectors\": [{ \"text\": \"设置\" }], \"direction\":\"UP\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } "},"zh-cn/zk/global/zk-global-drag.html":{"url":"zh-cn/zk/global/zk-global-drag.html","title":"拖动动作接口","keywords":"","body":"拖动动作接口 drag 从一个坐标到另一个坐标的拖动 从一个坐标到另一个坐标的拖动 @param startX 起始X坐标 @param startY 起始Y坐标 @param endX 目标X坐标 @param endY 目标Y坐标 @param duration 动作持续时长，单位毫秒 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"drag\", \"startX\": 1000, \"startY\": 1000, \"endX\":100, \"endY\":100, \"duration\":1500 }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } dragTo 拖动节点到目标节点 拖动节点到目标节点 @param selectors 选择器数组，更多选择器属性，请查看选择器与节点属性 @param destObj 目标选择器数组，更多选择器属性，请查看选择器与节点属性 @param duration 动作持续时长，单位毫秒 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"dragTo\", \"selectors\": [{ \"text\": \"设置\" }], \"destObj\": [{ \"text\": \"浏览器\" }], \"duration\":1500 }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } dragToPoint 拖动节点到目标坐标 拖动节点到目标坐标 @param selectors 选择器数组，更多选择器属性，请查看选择器与节点属性 @param endX 目标X坐标 @param endY 目标Y坐标 @param duration 动作持续时长，单位毫秒 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"dragToPoint\", \"selectors\": [{ \"text\": \"设置\" }], \"endX\":100, \"endY\":100, \"duration\":1500 }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } "},"zh-cn/zk/global/zk-global-input.html":{"url":"zh-cn/zk/global/zk-global-input.html","title":"输入动作接口","keywords":"","body":"输入动作接口 currentIsOurIme 当前是否是我们的输入法 当前是否是我们的输入法 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"currentIsOurIme\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } inputText 通过选择器输入数据 通过选择器输入数据 @param selectors 选择器数组，更多选择器属性，请查看选择器与节点属性 @param content 数据字符串 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"inputText\", \"selectors\": [{ \"clz\": \"android.widget.EditText\" }], \"content\":\"我是内容\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } imeInputText 通过输入法输入内容 使用输入法输入内容，前提是已经设置本程序的输入法为默认输入法 @param selectors 选择器数组，更多选择器属性，请查看选择器与节点属性 @param content 数据字符串 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"imeInputText\", \"selectors\": [{ \"clz\": \"android.widget.EditText\" }], \"content\":\"我是内容\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } pasteText 通过选择器粘贴数据 通过选择器粘贴数据 @param selectors 选择器数组，更多选择器属性，请查看选择器与节点属性 @param content 数据字符串 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"pasteText\", \"selectors\": [{ \"clz\": \"android.widget.EditText\" }], \"content\":\"我是内容\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } clearTextField 通过选择器清除数据 通过选择器清除数据 @param selectors 选择器数组，更多选择器属性，请查看选择器与节点属性 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"clearTextField\", \"selectors\": [{ \"clz\": \"android.widget.EditText\" }] }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } "},"zh-cn/zk/global/zk-global-node.html":{"url":"zh-cn/zk/global/zk-global-node.html","title":"节点操作接口","keywords":"","body":"节点操作接口 has 通过选择器判断元素是否存在 通过选择器判断元素是否存在 @param selectors 选择器数组，更多选择器属性，请查看选择器与节点属性 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"has\", \"selectors\": [{ \"text\": \"设置\" }] }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } waitExistActivity 等待activity界面出现 等待activity界面出现 @param activity activity类名 @param timeout 超时时间 单位毫秒 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"waitExistActivity\", \"activity\":\"com.aaa.Activity\", \"timeout\":10000 }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } waitExistNode 通过选择器判断并等待元素是否存在 通过选择器判断并等待元素是否存在 @param selectors 选择器数组，更多选择器属性，请查看选择器与节点属性 @param timeout 超时时间 单位毫秒 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"waitExistNode\", \"selectors\": [{ \"text\": \"设置\" }], \"timeout\":10000 }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } getNodeInfo 获取多个节点信息 获取多个节点信息 @param selectors 选择器数组，更多选择器属性，请查看选择器与节点属性 @param timeout 超时时间 单位毫秒 @return 节点信息集合JSON字符串节点信息属性 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"getNodeInfo\", \"selectors\": [{ \"text\": \"设置\" }], \"timeout\":10000 }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } getOneNodeInfo 获取单个节点信息 获取单个节点信息 @param selectors 选择器数组，更多选择器属性，请查看选择器与节点属性 @param timeout 超时时间 单位毫秒 @return 单个节点信息JSON字符串节点信息属性 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"getNodeInfo\", \"selectors\": [{ \"text\": \"设置\" }], \"timeout\":10000 }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } setFetchNodeMode 设置获取节点的模式 设置获取节点的模式 @param mode 1 是增强型， 2 是快速型，默认是增强型 @param fetchInvisibleNode 是否抓取隐藏的元素，默认不抓取 @param fetchNotImportantNode 是否抓取不重要的元素 @return 布尔型，true代表成功 false代表失败 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"setFetchNodeMode\", \"mode\": 1, \"fetchInvisibleNode\":true, \"fetchNotImportantNode\":true, }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } dumpXml 将元素节点变成XML 将元素节点变成XML @return 字符串 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\": \"dumpXml\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } 单节点连续操作 以下操作均是建立在取得节点信息后，有节点的nid的时候才能进行，如何取得节点信息请看getOneNodeInfo或者getNodeInfo方法 getNodeInfoParent 该节点的父级节点 该节点的父级节点 @param nid nodeinfo的nid值节点信息类 @return 节点信息的JSON字符串 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"getNodeInfoParent\", \"nid\":\"这个是nodeinfo的nid值\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } getNodeInfoChild 该节点的子节点 该节点的子节点 @param nid nodeinfo的nid值节点信息类 @param index 节点所有 从0开始 @return 节点信息的JSON字符串 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"getNodeInfoChild\", \"nid\":\"这个是nodeinfo的nid值\", \"index\":0 }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } getNodeInfoAllChildren 该节点的所有子节点 该节点的所有子节点 @param nid nodeinfo的nid值节点信息类 @return 节点信息数组的JSON字符串 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"getNodeInfoAllChildren\", \"nid\":\"这个是nodeinfo的nid值\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } getPreviousSiblingNodeInfo 前面的兄弟节点 前面的兄弟节点 @param nid nodeinfo的nid值节点信息类 @return 节点信息数组的JSON字符串 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"getPreviousSiblingNodeInfo\", \"nid\":\"这个是nodeinfo的nid值\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } getNextSiblingNodeInfo 后面的兄弟节点 后面的兄弟节点 @param nid nodeinfo的nid值节点信息类 @return 节点信息数组的JSON字符串 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"getNextSiblingNodeInfo\", \"nid\":\"这个是nodeinfo的nid值\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } getSiblingNodeInfo 所有兄弟节点 所有兄弟节点 @param nid nodeinfo的nid值节点信息类 @return 节点信息数组的JSON字符串 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"getSiblingNodeInfo\", \"nid\":\"这个是nodeinfo的nid值\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } inputTextNodeInfo 节点输入 节点输入 @param nid nodeinfo的nid值节点信息类 @param content 要输入的内容 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"inputTextNodeInfo\", \"nid\":\"这个是nodeinfo的nid值\", \"content\":\"我是内容\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } pasteTextNodeInfo 节点粘贴输入 节点粘贴输入 @param nid nodeinfo的nid值节点信息类 @param content 要输入的内容 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"pasteTextNodeInfo\", \"nid\":\"这个是nodeinfo的nid值\", \"content\":\"我是内容\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } imeInputTextNodeInfo 节点输入法输入 节点输入法输入 @param nid nodeinfo的nid值节点信息类 @param rect 节点所在的bounds矩形框 @param content 要输入的内容 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"pasteTextNodeInfo\", \"nid\":\"这个是nodeinfo的nid值\", \"content\":\"我是内容\", \"rect\":{ \"left\":100, \"top\":100, \"right\":1000, \"bottom\":1000, } }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } clearTextNodeInfo 清除节点数据 清除节点数据 @param nid nodeinfo的nid值节点信息类 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"clearTextNodeInfo\", \"nid\":\"这个是nodeinfo的nid值\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } refreshNodeInfo 刷新节点数据 刷新节点数据 @param nid nodeinfo的nid值节点信息类 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"refreshNodeInfo\", \"nid\":\"这个是nodeinfo的nid值\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } isValidNodeInfo 节点是否有效 节点是否有效 @param nid nodeinfo的nid值节点信息类 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"isValidNodeInfo\", \"nid\":\"这个是nodeinfo的nid值\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } "},"zh-cn/zk/global/zk-global-systemkey.html":{"url":"zh-cn/zk/global/zk-global-systemkey.html","title":"系统按键接口","keywords":"","body":"系统按键接口 home 返回桌面 返回桌面 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"home\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } back 返回 返回 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"back\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } openNotification 打开通知栏 打开通知栏 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"openNotification\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } openQuickSettings 打开快速设置 打开快速设置 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"openQuickSettings\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } recentApps 最近APP任务按键 最近APP任务按键 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"recentApps\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } getRunningPkg 取得当前运行的App包名 取得当前运行的App包名 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"getRunningPkg\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } getRunningActivity 取得当前运行的Activity类名 取得当前运行的Activity类名 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"getRunningActivity\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } "},"zh-cn/zk/global/zk-global-notice.html":{"url":"zh-cn/zk/global/zk-global-notice.html","title":"通知栏接口","keywords":"","body":"通知栏接口 hasNotificationPermission 检查是否含有状态栏监听权限 检查是否含有状态栏监听权限 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"hasNotificationPermission\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } requestNotificationPermission 请求监听状态栏的权限 请求监听状态栏的权限 @param timeout 超时时间，单位毫秒 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"requestNotificationPermission\", \"timeout\":10000, }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } getLastNotification 获取最近通知栏对象 获取最近通知栏对象 @param pkg 指定包名 @param size 指定获取的条数 @return JSON数组字符串，请参考获取通知 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"getLastNotification\", \"pkg\":\"\", \"size\":10 }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } shotNotification 将通知发射处理，相当于点击了通知栏 将通知发射处理，相当于点击了通知栏 @param seqId getLastNotification方法获取通知栏数据的seqId @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"shotNotification\", \"seqId\":\"XXXXXX\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } cancelNotification 将通知进行取消操作 将通知进行取消操作 @param seqId getLastNotification方法获取通知栏数据的seqId @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"cancelNotification\", \"seqId\":\"XXXXXX\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } getLastToast 获取toast数据 获取toast数据 @param pkg 指定包名 @param size 指定获取的条数 @return JSON数组字符串，请参考获取Toast var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"getLastToast\", \"pkg\":\"\", \"size\":10 }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } "},"zh-cn/zk/global/zk-global-floatview.html":{"url":"zh-cn/zk/global/zk-global-floatview.html","title":"悬浮窗接口","keywords":"","body":"悬浮窗接口 hasFloatViewPermission 检查是否含有浮窗权限 检查是否含有浮窗权限 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"hasFloatViewPermission\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } requestFloatViewPermission 请求展示浮窗的权限 请求展示浮窗的权限 @param timeout 超时时间，单位毫秒 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"requestFloatViewPermission\", \"timeout\":10000, }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } showFloatView 展示浮窗 展示浮窗 @param params js的map对象，包含的 var map = {\"path\":\"main.html\",\"tag\":\"test\"}; 类似这样的参数 参数解析: tag:字符串 悬浮窗唯一定位的标示 path:字符串 IEC 中的布局文件 title:字符串 悬浮窗标题 titleBg:字符串 悬浮窗背景，16进制，例如#888888，或者#88000000 x:整型 悬浮窗起始X坐标 y:整型 悬浮窗起始Y坐标 w:整型 悬浮窗起始宽度 h:整型 悬浮窗起始高度 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"showFloatView\", \"params\":{ \"path\": \"main.html\", \"tag\": \"tag\", \"title\": \"sss\", \"titleBg\": \"#888888\", \"x\": 10, \"y\": 10, \"w\": 100, \"h\": 200 } }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } closeFloatView 关闭浮窗 关闭浮窗 @param tag showFloatView 使用的tag参数，对悬浮窗唯一定位的 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"closeFloatView\", \"tag\": \"tag\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } closeAllFloatView 关闭所有悬浮窗 关闭所有悬浮窗，但不包含日志悬浮窗 @param tag showFloatView 使用的tag参数，对悬浮窗唯一定位的 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"closeAllFloatView\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } showLogWindow 展示日志浮窗 展示日志浮窗 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"showLogWindow\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } closeLogWindow 关闭日志浮窗 关闭日志浮窗 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"closeLogWindow\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } setLogViewSize 设置日志窗口大小 设置日志窗口大小 @param w 宽度 @param h 高度 @param textSize 日志的字体大小 @param backgroundColor 背景颜色，例如#336699 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"setLogViewSize\", \"w\":300, \"h\":400, \"textSize\":14, \"backgroundColor\":\"#888888\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } setLogText 展示消息到悬浮窗日志 展示消息到悬浮窗日志中，颜色是白色的 @param msg 消息 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"setLogText\", \"msg\": \"msg\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } setAllLogEnd 结束所有日志展示 结束所有日志展示，恢复悬浮窗可拖动 @return 布尔型 true 代表保存，false代表不保存 var request = require('request'); var url=\"http://127.0.0.1:20391/global\"; var p = { \"type\":\"setAllLogEnd\" }; var data = JSON.stringify(p); request({ url: url, method: \"POST\", json: true, headers: { \"content-type\": \"application/json\", }, body: data }, function(error, response, body) { if (!error && response.statusCode == 200) { console.log(body) } } "},"zh-cn/zk/zk-agent.html":{"url":"zh-cn/zk/zk-agent.html","title":"代理事件模块接口 - 开发中","keywords":"","body":""},"zh-cn/zk/zk-image.html":{"url":"zh-cn/zk/zk-image.html","title":"图色模块接口 - 开发中","keywords":"","body":""},"zh-cn/funcs/plugin/plugins.html":{"url":"zh-cn/funcs/plugin/plugins.html","title":"插件开发","keywords":"","body":"说明 插件本身是一个apk包，和普通的android开发无任何区别 开发的时候可以使用Android Studio进行开发，打包成apk即可 本章节主要介绍使用EasyClick开发开发插件 新建插件工程 使用IDEA创建项目选择'EasyClick 插件工程' 点击下一步并完成，会自动生成对应的java类和配置信息 插件目录结构 src/js/main.js 这个文件是js调用插件相关方法的测试入口 src/com/ 这个文件夹下面存放的的java源码，PluginClz 类是默认生成的插件入口类 libs/jarlibs文件夹用于存放三方引用jar包，会被合并到插件中 libs/solibs 存放so封装的文件，会被编译到插件的 lib 文件夹中 libs/resources 存放资源的文件，会被编译到插件的 resources 文件夹中 libs/jslibs 存放JS类库文件，不会编译到插件中，仅用来进行测试和调用 作为插件开发者，只要关注java代码的编写即可，如果你有jni的调用，请将so文件放到libs/solibs中 插件java类 PluginClz PluginClz是默认生成的插件java类 test 方法是默认生成的插件方法 实际调用请看main.js中的调用 插件运行 执行菜单栏 'EasyClick 开发工具 - 运行工程' 即可，前提是要连接到手机 插件打包 执行菜单栏 'EasyClick 开发工具 - 打包工程' 即可，打包结果请看EasyClick 运行日志的输出 插件使用 将打好包的apk文件，放到脚本工程的plugin 文件夹下 使用 loadDex 函数载入插件 使用new方法生成插件对象实例即可调用 "},"zh-cn/question-answer.html":{"url":"zh-cn/question-answer.html","title":"常见问题","keywords":"","body":"为什么选择JavaScript语言? 简单易上手，资料多 会基本语法和函数调用就可以编程 开发工具成熟易上手 JS教程：https://www.runoob.com/js/js-tutorial.html UI参数未更新或者混乱 该问题是因为经常换tag导致，可以在手机上清空EC调试程序缓存，正式打包后不会出现该问题 IDEA 新建工程问题 将模块添加到项目中时出错 错误信息：Argument for @NotNull parameter 'file' of com/intellij/openapi/roots/impl/ContentEntryImpl.addSourceFolder must not be nul 解决：关闭idea和adb.exe进程之后，再重新打开就ok了 或者idea换2019.3的版本 函数不生效 使用代理模块的函数不生效，请检查运行模式是否是代理模式 开发工具连接不到手机? 这种情况是因为adb连接不成功导致的，adb连接需要满足一下几个条件： 手机开启usb调试模式 手机通过数据线连接上电脑 没有其他占用adb工具的程序 链接设备问题 比如电脑休眠以后连不上，重启就好，模拟器或者个别机型连不上，先下载ec.apk安装以后再链接,就好了 还有就是IDE开时间长了或者开好几个模拟器，连不上，重启开发工具试试 手机连接后，拔掉重新插入不识别手机？ 1、尝试使用进程管理器杀死adb进程，再次连接 -2、使用360等手机助手连接一次，如果助手连接上，在使用开发工具连接；如果助手连接不上，可能是驱动问题 Adb被占用解决办法 手机开启usb调试模式 关闭其他占用adb的软件 用任务管理器结束掉所有的ADB，确保手机没有占用adb的命令 电脑上的各种杀毒管家，刷机助手等也会占用adb，确保已经关闭 部分手机使用utils模块打开APP失效 例如小米手机权限问题导致无法使用openAppByName等打开APP函数，请到权限管理允许启动三方应用权限，或者允许全部的权限 OPPO 解决方法： https://www.jianshu.com/p/5f6d8379533b 屏幕映射不成功 由于机型兼容性问题，可能导致屏幕映射不成功，不影响节点获取，两个功能是独立的。 可以用三方的，比如 qtscrcpy，或者scrcpy 如何开启 WIFI ADB 请参考教程：https://www.jianshu.com/p/a9543f2e89de 整理一下命令，方便使用 usb 连接手机 adb tcpip 5555 adb shell ifconfig wlan0 adb connect 手机ip地址 小米之类的手机点击没反应 因为开发者选项中的【USB 调试（安全设置）】没有开启，开启即可 开启地址参考：https://blog.csdn.net/jackeny37/article/details/74516350 "},"zh-cn/agreement.html":{"url":"zh-cn/agreement.html","title":"用户协议","keywords":"","body":"用户协议 特别提示 《EasyClick(易点软件)用户协议》（以下简称“本协议”）适用于所有使用易点软件服务的用户（包括EC调试版、EC个人版、EC企业版等，以下或称“您”）。本协议一经同意并接受 即形成您与易点软件所属的公司及其关联公司（以下简称“易点软件”）间有法律约束力之文件。您确认，您已详细阅读了本协议所有内容，您充分理解并同意接受本协议的全部内容。 我们还需要提醒您的是，如本协议内容发生修改或更新，我们将会在易点软件提示修改内容并公布。您在使用易点软件公司提供的各项服务之前，应仔细阅读本协议，如您不同意变更后的协议内容，应立即停用易点软件及相关服务。 一、易点软件使用规则 易点软件是一个可以自动模拟执行您在手机、平板屏幕操作的一切动作的平台软件，可以录制您的屏幕操作然后播放，也可以运行第三方作者用 Javascript,Lua 脚本语言编写的脚本（易点软件不编写任何脚本）。 易点软件是您测试软件 BUG 稳定性、娱乐游戏时的好帮手，但易点软件本身并不对任何游戏或软件进行修改、加速。 易点软件在正确安装后，您有权免费试用易点软件，但易点软件有权终止免费服务。如果您想要取消上述限制，则须通过合法渠道购买授权码。您确认您明确知晓，您向易点软件购买的仅仅是易点软件软件本身的使用许可， 并不包含任何脚本。同时，易点软件有权对上述试用政策作出调整，但无论如何，在您根据易点软件的销售政策购买易点软件之前，易点软件有权随时停止您使用易点软件的权限。 您知晓并确认，就易点软件安卓版本，由于安卓设备种类繁多，如果因为安卓设备厂商对于安卓系统的修改等原因，导致易点软件无法正常使用的，虽然易点软件会尽一切技术上的努力保持易点软件的正常使用，但易点软件对此不承担任何责任，且不会向您退款。您确认您在购买易点软件之前知晓该风险的存在并愿意承担该风险。 您知晓并确认，易点软件在正确安装后，里面并不自带任何脚本，易点软件不编写任何脚本。您有权自行录制、编写任何脚本，您也可以通过购买或者其他合法渠道获得脚本，但您不得通过任何渠道获得任何违反中华人民共和国法律法规或侵犯第三方合法权益的脚本。易点软件的官网、论坛以及其他产品中可能存在脚本，但您确认您知晓，这些脚本并非易点软件编写或提供，而是由其他用户上传，即便您是从上述渠道获得的脚本，易点软件也不保证上述脚本的正确性、安全性、合法性，易点软件不对任何脚本引发的任何问题向您承担任何责任，您使用任何脚本引发的任何后果由您自行承担。 您知晓并确认，您自行获得相关脚本后，如果在使用、运行相关脚本的过程中造成了各种可能的不利影响，比如封号，丢失账号数据，或运行脚本导致违反目标程序的用户协议等,您须自行承担各种不利影响，您无权要求易点软件承担任何责任。 您知晓并确认，您在购买易点软件授权码时，可以在易点软件官方淘宝店(http://ieasyclick.com)购买,或者易点软件指定的其他官方渠道购买。您必须采用易点软件指定的方式购买授权，可供购买方式包括但不限于：网上银行、第三方支付（例如支付宝、财付通等）、手机充值卡。您的购买行为表示您已经同意并自愿遵守易点软件的相关授权规则（授权规则的修改权及最终解释权均归易点软件，具体内容以易点软件官方公布的授权规则为准）。 您知晓并确认，您仅可以通过上述官方渠道购买授权码，不得购买来源不明的授权码。易点软件有权对通过非正常途径充值的授权码进行冻结。易点软件保留向通过冒充、盗用他人身份或者帐号等非正常途径购买授权码的单位或个人追究法律责任的一切权力。 您知晓并确认，易点软件授权码一旦购买成功并激活使用，购买即确定完成，您不得要求退还已付金额。 您知晓并确认，易点软件企业版的中控器属于本协议所称的“易点软件”软件的一部分。如您需要购买使用易点软件企业版的，您应当事先通过易点软件网站了解企业版的功能特点以及与普通版的区别。您购买企业版后，无权再因企业版的功能无法满足您的要求等原因要求易点软件退款或转换为普通版。 您知晓并确认，易点软件公司终止运营或者运营权发生转移的，有权提前30日予以公告。 您知晓并确认，易点软件提醒您妥善保管好您的授权码。非因易点软件原因造成的授权码遗失或泄露造成授权码无法使用的，易点软件不承担任何责任。 二、帐号管理 易点软件服务可能需要您注册帐号，如需要您注册的，您应保证其注册信息真实、准确、完整、合法。如上述信息发生任何变化，您应及时变更注册信息。若您提供给易点软件的注册信息不真实、不准确、不完整、不合法，含有违法或不良信息的，易点软件有权不予注册，并保留终止您使用易点软件各项服务的权利。您对于注册信息的不真实、不完整、不准确、未及时更新的，易点软件有权采取通知限期改正、暂停使用、注销登记等措施，因此所导致的一切不利后果及损失，应由您承担一切责任。 您有义务妥善保管其在易点软件申请的账号及密码，不得泄漏给任何第三人。您必须为其账号及密码之全部行为负责，此账号及密码项下全部行为即视为您本身之行为。 您账号及密码仅限于您个人使用，非经易点软件同意，您不得出借、移转或让与等任何方式给其他第三人使用，否则易点软件有权解除本协议并不退还您费用。易点软件不能也不会对因您未能遵守本款约定而发生的任何损失、损毁及其他不利后果负责。您理解易点软件对您的请求采取行动需要合理期限，在此之前，易点软件对已执行的指令及（或）所导致的您的损失不承担任何责任。 易点软件承诺对获得的您的个人信息主要为其正常的记录和管理客户信息及为本协议之目的使用。尽管易点软件对您的个人信息保护做了极大的努力，但是仍然不能保证现有的安全技术措施使您的隐私信息等不受任何形式的损失，您理解并同意，易点软件不对非因易点软件主观故意而导致的任何损害赔偿承担责任，包括但不限于商誉、隐私、使用、数据等方面的损失或其他无形损失的损害赔偿（无论易点软件是否已被告该等损害赔偿的可能性）。 三、知识产权 ·易点软件网站(http://ieasyclick.com) 所有的LOGO、商标、图形、易点软件软件及其他产品、技术、源代码与所有程序的知识产权及其他合法权益均属于易点软件，在此并未授权。 未经易点软件许可，任何人不得擅自以任何方式（包括但不限于：以非法的方式复制、传播、展示、镜像、上传、下载）使用，或通过非常规方式（如：恶意干预数据）影响易点软件的正常服务,也不得对易点软件软件进行任何修改、反向编译，更不得在易点软件软件中放置或嵌入木马程序或后门等危害第三方数据安全性的程序。否则，易点软件将依法追究法律责任。 易点软件特别提醒您：易点软件不编写任何脚本。您有权自行录制、编写任何脚本，您也可以通过购买或者其他合法渠道获得脚本。您通过合法渠道获得的脚本的知识产权归脚本作者所有。您不得通过任何渠道获得任何违反中华人民共和国法律法规或侵犯第三方合法权益的脚本，您在使用任何脚本（包括但不限于通过易点软件渠道获得的脚本）前，应当自行审核脚本本身的安全性、合法性。否则，因上述事宜所产生的一切法律责任均由您承担，易点软件在此种情况下有权单方解除本协议，您应当同时负责赔偿易点软件遭受的全部损失，包括但不限于任何的赔偿金、补偿金、违约金、罚款、诉讼费、调查取证费、公证费、律师费等。 四、免责事由 您知悉并同意，易点软件不因下述任一情况而可能导致的任何损害赔偿承担责任，包括但不限于财产、收益、数据资料等方面的损失或其它无形损失： 因台风、地震、海啸、洪水、停电、战争、恐怖袭击等不可抗力之因素导致易点软件充值系统或服务不能正常运作。 由于黑客攻击、电信部门技术调整或故障、系统维护等原因而造成的系统服务中断或者延迟。 由于政府命令、法律法规的变更、司法机关及行政机关的命令、裁定等原因而导致的系统服务中断、终止或延迟。 由于您将授权码或易点软件帐户密码告知他人或未保管好自己的授权码密码或与他人共享易点软件帐户或任何其他非本公司的过错，导致您的个人资料泄露。 由于与本公司链接或合作的其它网站（如网上银行等）所造成的银行帐户信息、身份信息泄露及由此而导致的任何法律争议和后果。 您（包括未成年人用户）向本公司提供错误、不完整、不实信息等，造成不能使用易点软件帐户或遭受任何其他损失。 如因系统维护或升级的需要而需暂停网络充值服务时，我们将尽可能事先进行通告。对于充值服务的中断或终止而给您造成的任何损失，我们无须对您或任何第三方承担任何责任。 您已经充分阅读并同意易点软件刊登在网站上的《免责声明》 五、服务变更、中断或终止 鉴于服务的特殊性，您同意易点软件有权随时变更、中断或终止部分或全部的服务（包括收费服务及免费服务）。如变更、中断或终止的服务属于免费服务，易点软件无需通知用户，也无需对任何用户或任何第三方承担任何责任；如变更、中断或终止的服务属于收费服务，易点软件会在变更、中断或终止之前事先通知您，并向您提供等值的替代性的收费服务。如您不愿意接受替代性的收费服务，就您已经向易点软件支付的服务费，易点软件会按照您实际使用相应收费服务的情况，扣除相应服务费之后将剩余的服务费退还给您。如果易点软件服务就此终止的，易点软件会与您完成结算工作，但除退款外，不承担其他任何责任。 您明确知晓并理解，易点软件需要定期或不定期地对提供服务的平台或相关的设备进行检修或者维护，如因此类情况而造成收费服务在合理时间内的中断，易点软件无需为此承担任何责任，但易点软件应尽可能事先进行通告。 六、违约责任 如您违反本协议项下的任何规则、声明、承诺及保证，我们保留根据实际损失向您追究责任的权利。 七、法律适用与争议解决 本协议的订立、效力、解释、履行、修改和终止以及争议的解决适用中国的法律。因解释和履行本协议而发生的任何争议，本协议双方应首先通过友好协商的方式加以解决。如果在一方向其他方发出要求协商解决的书面通知后30天之内争议仍然得不到解决，则任何一方均有权向北京市顺义区人民法院提起诉讼。 八、隐私政策 易点软件将严格保护您的隐私。为服务用户的目的，易点软件可能通过使用您的个人信息，向您提供服务，包括但不限于向您发出产品和服务信息，或者与易点软件合作伙伴共享信息以便他们向您发送有关其产品和服务的信息。除此之外，您的个人信息将仅用于收集时即已确定并且经过您同意的目的，如有除此之外的任何其他用途，我们都会提前征得您的同意。在任何时候，您的信息均依照易点软件的隐私政策处理，并可在易点软件官网上浏览。 九、其他 易点软件不保证所有安卓设备均可正常运行易点软件，您应当在使用前先查询确认您的设备是否可以正常运行，易点软件不会因为您的设备无法正常运行易点软件向您退款。 本协议项下所有的通知均可通过重要页面公告等方式进行，该等通知于发送之日视为已送达您。 本协议构成双方对本协议之约定事项及其他有关事宜的完整协议，除本协议规定的，未赋予本协议各方其他权利。 如本协议中的任何条款无论因何种原因完全或部分无效或不具有执行力，本协议的其余条款仍应有效并且有约束力。 本协议中的标题仅为方便而设，不具法律或契约效果。 "},"zh-cn/declare.html":{"url":"zh-cn/declare.html","title":"免责声明","keywords":"","body":"免责声明 用户在接受易点软件平台及其关联网站（以下称“易点软件平台”）的服务（包括但不限于EC个人版、EC企业版服务等所有由易点软件提供的服务）之前， 请仔细阅读本免责声明并同意本声明的条款。 用户通过各种方式使用易点软件平台（包括安装使用易点软件平台所提供的软件等）服务的行为，将被视为已接受本声明所涉全部内容。 若用户对 本声明的任何条款有异议，请停止使用易点软件平台所提供的任何服务。 易点软件平台是以共建自动化测试脚本开发生态为理念，以用户需求为导向，通过先进的数据处理技术，为广大自动化测试脚本开发者脚本平台。 因脚本存在权利瑕疵或侵犯了 第三方的知识产权等任何合法权益，由脚本开发及提交者承担所有责任。因此给易点软件平台或 任何第三方造成损失的，脚本开发及提交者应承担任何可能需要支付给第三方的赔偿款等款项。 易点软件平台有权无需事先通知即可自行决定对脚本采取拒绝接入、下线、删除等处理措施 易点软件平台一贯高度重视知识产权保护并遵守中国各项知识产权法律、法规和具有约束力的规范性文件，重视正版，打击盗版。根据相关法律、法规和规范性文件要求，易点软件平台制定了旨在保护权利人的合法权益的措施和步骤，当权利人发现在脚本内容侵犯其任何合法权益时，权利人应事先向易点软件平台发出“权利通知”，易点软件平台将根据中国法律法规和规范性文件采取措施删除相关脚本内容。 具体措施和步骤如下： 一、权利通知 任何个人或单位如果发现易点软件平台用户或开发者利用易点软件平台及其服务侵害其合法权 益，请务必以书面的通讯方式向易点软件提交权利通知 请注意：如果权利通知的陈述失实，权利通知提交者将承担对由此造成的全部法律责任（包括但 不限于赔偿各种费用及律师费）。如果上述个人或单位不确定易点软件平台可获取的资料是否侵 犯了其合法权益，易点软件建议该个人或单位首先咨询专业人士。 为了易点软件平台有效处理上述个人或单位的权利通知，请提供以下内容： 1.权利人对涉嫌侵权内容拥有权利的权属证明； 2.要求删除的脚本的名称和具体明确的网站访问地址； 3.权利人具体的联络信息，包括姓名、身份证或护照复印件（对自然人）、单位登记证明复印件 （对单位）、通信地址、电话号码、传真和电子邮件； 4.请您签署相关文件，如果您是依法成立的机构或组织，请您加盖公章。 请您把以上资料和联络方式反馈至 support@ieasyclick.com 邮箱。 二、反通知 易点软件平台根据前述通知移除相关内容的，被移除内容的内容提供者可以依法向易点软件平台 发出关于被移除内容不侵犯著作权或其他合法权益的反通知。反通知发出后，易点软件平台可以 恢复被移除的内容，且依法对该恢复行为不承担法律责任。 请注意：如果您\"反通知\"的陈述失实，您将承担对由此造成的全部法律责任（包括但不限于赔偿 各种费用及律师费）。如果您不确定易点软件平台可获取的资料是否侵犯了他人的权利，我们建 议您首先咨询专业人士。 为了便于我们处理您的反对通知，请使用以下格式（包括各条款的序号）： 1.请指明被易点软件移除的信息或内容及其访问地址； 2.被移除内容的合法性证明，包括但不限于您对已移除的内容拥有著作权或其他合法权益的权属 证明或您可以合法使用该作品或该内容的证明； 3.请提供具体的联络信息，包括姓名、身份证或护照复印件（对自然人）、单位登记证明复印件 （对单位）、通信地址、电话号码、传真和电子邮件； 4.请您签署相关文件，如果您是依法成立的机构或组织，请您加盖公章。 请您把以上资料和联络方式反馈至 support@ieasyclick.com 邮箱。 知识产权归属 易点软件 以技术交流学习自动化测试为目的的初衷，不包含任何外挂、辅助等危害计算机信息的违法功能 如果您使用了易点软件，标示您已经充分理解与同意，必须遵守以下原则: 您开发的软件或者脚本归属权以及版权属于您自己，与易点软件无关。 您开发的软件出现问题，包括但不限于法律责任、软件异常，由您自己承担责任。 您不得用于开发非法软件，包括到不限于恶意注册、诈骗、危害国家、危害他人等非法软件。 您使用易点软件开发的软件，所有权利和责任都由您自己承担。 易点软件平台不保证服务不会中断。因运营策略调整、不可抗力、网络状况、通讯路线或管理部 门的要求等原因造成易点软件平台的服务无法正常提供的，易点软件平台不承担任何法律责任。 本免责声明的修改及更新权均属于易点软件平台所有。 "}}